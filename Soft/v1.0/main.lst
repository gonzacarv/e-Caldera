CCS PCM C Compiler, Version 4.140, 32554               23-may.-17 09:03

               Filename:   D:\2.Datos\Electronica\Proyectos\Microchip\Proyecto Caldera\Soft\main.lst

               ROM used:   4966 words (61%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           66 (18%) worst case
               Stack:     8 locations

*
0000:  MOVLW  0F
0001:  MOVWF  0A
0002:  GOTO   79F
0003:  NOP
.................... /////////////////////////////////////////////////////////////////// 
.................... //    Titulo: Firmware de control de Caldera de calefaccion      // 
.................... //    Autor: Gonzalo Carvallo                                    // 
.................... //    e-mail: gonzacarv@gmail.com    Fecha: Junio de 2016        // 
.................... /////////////////////////////////////////////////////////////////// 
....................  
.................... #include <16f877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC=8 
.................... #fuses HS, WDT, NOPROTECT, NOLVP, PUT, BROWNOUT // Opciones de configuración 
.................... #use delay(clock=20000000) //Clock speed HZ = 20MHZ 
*
0093:  MOVLW  51
0094:  MOVWF  04
0095:  BCF    03.7
0096:  MOVF   00,W
0097:  BTFSC  03.2
0098:  GOTO   0A6
0099:  MOVLW  06
009A:  MOVWF  78
009B:  CLRF   77
009C:  DECFSZ 77,F
009D:  GOTO   09C
009E:  DECFSZ 78,F
009F:  GOTO   09B
00A0:  MOVLW  7B
00A1:  MOVWF  77
00A2:  DECFSZ 77,F
00A3:  GOTO   0A2
00A4:  DECFSZ 00,F
00A5:  GOTO   099
00A6:  RETURN
*
0615:  MOVLW  03
0616:  SUBWF  48,F
0617:  BTFSS  03.0
0618:  GOTO   623
0619:  MOVLW  48
061A:  MOVWF  04
061B:  BCF    03.7
061C:  MOVF   00,W
061D:  BTFSC  03.2
061E:  GOTO   623
061F:  GOTO   621
0620:  GOTO   621
0621:  DECFSZ 00,F
0622:  GOTO   620
0623:  RETURN
.................... #include <flex_lcd.c> 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_C7 
.................... #define LCD_DB6   PIN_C6 
.................... #define LCD_DB7   PIN_C5 
....................  
.................... #define LCD_E     PIN_D5 
.................... #define LCD_RS    PIN_D7 
.................... #define LCD_RW    PIN_D6 
....................  
.................... /* 
....................  
.................... #define LCD_DB4   PIN_G2 
.................... #define LCD_DB5   PIN_J0 
.................... #define LCD_DB6   PIN_G3 
.................... #define LCD_DB7   PIN_J1 
....................  
.................... #define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C3 
.................... #define LCD_RW    PIN_C2 
....................  
.................... */ 
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
00A7:  BTFSC  58.0
00A8:  GOTO   0AB
00A9:  BCF    08.4
00AA:  GOTO   0AC
00AB:  BSF    08.4
00AC:  BSF    03.5
00AD:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
00AE:  BCF    03.5
00AF:  BTFSC  58.1
00B0:  GOTO   0B3
00B1:  BCF    07.7
00B2:  GOTO   0B4
00B3:  BSF    07.7
00B4:  BCF    20.7
00B5:  MOVF   20,W
00B6:  BSF    03.5
00B7:  MOVWF  07
....................  output_bit(LCD_DB6, !!(nibble & 4));     
00B8:  BCF    03.5
00B9:  BTFSC  58.2
00BA:  GOTO   0BD
00BB:  BCF    07.6
00BC:  GOTO   0BE
00BD:  BSF    07.6
00BE:  BCF    20.6
00BF:  MOVF   20,W
00C0:  BSF    03.5
00C1:  MOVWF  07
....................  output_bit(LCD_DB7, !!(nibble & 8));     
00C2:  BCF    03.5
00C3:  BTFSC  58.3
00C4:  GOTO   0C7
00C5:  BCF    07.5
00C6:  GOTO   0C8
00C7:  BSF    07.5
00C8:  BCF    20.5
00C9:  MOVF   20,W
00CA:  BSF    03.5
00CB:  MOVWF  07
....................  
....................  delay_cycles(1);  
00CC:  NOP
....................  output_high(LCD_E);  
00CD:  BCF    08.5
00CE:  BCF    03.5
00CF:  BSF    08.5
....................  delay_us(2);  
00D0:  MOVLW  02
00D1:  MOVWF  77
00D2:  DECFSZ 77,F
00D3:  GOTO   0D2
00D4:  GOTO   0D5
00D5:  NOP
....................  output_low(LCD_E);  
00D6:  BSF    03.5
00D7:  BCF    08.5
00D8:  BCF    03.5
00D9:  BCF    08.5
.................... }  
00DA:  RETURN
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
00DB:  CLRF   59
....................      
.................... output_high(LCD_E);  
00DC:  BSF    03.5
00DD:  BCF    08.5
00DE:  BCF    03.5
00DF:  BSF    08.5
.................... delay_cycles(1);  
00E0:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
00E1:  BSF    03.5
00E2:  BSF    08.4
00E3:  BCF    03.5
00E4:  BCF    59.0
00E5:  BTFSC  08.4
00E6:  BSF    59.0
.................... retval_1 = input(LCD_DB5);  
00E7:  BSF    20.7
00E8:  MOVF   20,W
00E9:  BSF    03.5
00EA:  MOVWF  07
00EB:  BCF    03.5
00EC:  BCF    59.1
00ED:  BTFSC  07.7
00EE:  BSF    59.1
.................... retval_2 = input(LCD_DB6);  
00EF:  BSF    20.6
00F0:  MOVF   20,W
00F1:  BSF    03.5
00F2:  MOVWF  07
00F3:  BCF    03.5
00F4:  BCF    59.2
00F5:  BTFSC  07.6
00F6:  BSF    59.2
.................... retval_3 = input(LCD_DB7);  
00F7:  BSF    20.5
00F8:  MOVF   20,W
00F9:  BSF    03.5
00FA:  MOVWF  07
00FB:  BCF    03.5
00FC:  BCF    59.3
00FD:  BTFSC  07.5
00FE:  BSF    59.3
....................    
.................... output_low(LCD_E);  
00FF:  BSF    03.5
0100:  BCF    08.5
0101:  BCF    03.5
0102:  BCF    08.5
....................      
.................... return(retval);     
0103:  MOVF   59,W
0104:  MOVWF  78
.................... }     
0105:  RETURN
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
010A:  BSF    03.5
010B:  BCF    08.6
010C:  BCF    03.5
010D:  BSF    08.6
.................... delay_cycles(1);  
010E:  NOP
....................  
.................... high = lcd_read_nibble();  
010F:  CALL   0DB
0110:  MOVF   78,W
0111:  MOVWF  58
....................  
.................... low = lcd_read_nibble();  
0112:  CALL   0DB
0113:  MOVF   78,W
0114:  MOVWF  57
....................  
.................... return( (high<<4) | low);  
0115:  SWAPF  58,W
0116:  MOVWF  77
0117:  MOVLW  F0
0118:  ANDWF  77,F
0119:  MOVF   77,W
011A:  IORWF  57,W
011B:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0106:  BSF    03.5
0107:  BCF    08.7
0108:  BCF    03.5
0109:  BCF    08.7
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
011C:  MOVF   78,W
011D:  MOVWF  57
011E:  BTFSC  57.7
011F:  GOTO   10A
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0120:  MOVF   55,F
0121:  BTFSC  03.2
0122:  GOTO   128
....................    output_high(LCD_RS);  
0123:  BSF    03.5
0124:  BCF    08.7
0125:  BCF    03.5
0126:  BSF    08.7
.................... else  
0127:  GOTO   12C
....................    output_low(LCD_RS);  
0128:  BSF    03.5
0129:  BCF    08.7
012A:  BCF    03.5
012B:  BCF    08.7
....................        
....................  delay_cycles(1);  
012C:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
012D:  BSF    03.5
012E:  BCF    08.6
012F:  BCF    03.5
0130:  BCF    08.6
.................... delay_cycles(1);  
0131:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
0132:  BSF    03.5
0133:  BCF    08.5
0134:  BCF    03.5
0135:  BCF    08.5
....................  
.................... lcd_send_nibble(n >> 4);  
0136:  SWAPF  56,W
0137:  MOVWF  57
0138:  MOVLW  0F
0139:  ANDWF  57,F
013A:  MOVF   57,W
013B:  MOVWF  58
013C:  CALL   0A7
.................... lcd_send_nibble(n & 0xf);  
013D:  MOVF   56,W
013E:  ANDLW  0F
013F:  MOVWF  57
0140:  MOVWF  58
0141:  CALL   0A7
.................... }  
0142:  RETURN
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
1011:  BSF    03.5
1012:  BCF    08.7
1013:  BCF    03.5
1014:  BCF    08.7
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
1015:  BSF    03.5
1016:  BCF    08.6
1017:  BCF    03.5
1018:  BCF    08.6
.................... #endif  
....................  
.................... output_low(LCD_E);  
1019:  BSF    03.5
101A:  BCF    08.5
101B:  BCF    03.5
101C:  BCF    08.5
....................  
.................... delay_ms(15);  
101D:  MOVLW  0F
101E:  MOVWF  51
101F:  BCF    0A.4
1020:  CALL   093
1021:  BSF    0A.4
....................  
.................... for(i=0 ;i < 3; i++)  
1022:  CLRF   3E
1023:  MOVF   3E,W
1024:  SUBLW  02
1025:  BTFSS  03.0
1026:  GOTO   033
....................    {  
....................     lcd_send_nibble(0x03);  
1027:  MOVLW  03
1028:  MOVWF  58
1029:  BCF    0A.4
102A:  CALL   0A7
102B:  BSF    0A.4
....................     delay_ms(5);  
102C:  MOVLW  05
102D:  MOVWF  51
102E:  BCF    0A.4
102F:  CALL   093
1030:  BSF    0A.4
....................    }  
1031:  INCF   3E,F
1032:  GOTO   023
....................  
.................... lcd_send_nibble(0x02);  
1033:  MOVLW  02
1034:  MOVWF  58
1035:  BCF    0A.4
1036:  CALL   0A7
1037:  BSF    0A.4
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
1038:  CLRF   3E
1039:  MOVF   3E,W
103A:  SUBLW  03
103B:  BTFSS  03.0
103C:  GOTO   04A
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
103D:  MOVF   3E,W
103E:  BCF    0A.4
103F:  CALL   004
1040:  BSF    0A.4
1041:  MOVWF  3F
1042:  CLRF   55
1043:  MOVF   3F,W
1044:  MOVWF  56
1045:  BCF    0A.4
1046:  CALL   106
1047:  BSF    0A.4
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
1048:  INCF   3E,F
1049:  GOTO   039
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
01F8:  DECFSZ 52,W
01F9:  GOTO   1FB
01FA:  GOTO   1FE
....................    address = lcd_line_two;  
01FB:  MOVLW  40
01FC:  MOVWF  53
.................... else  
01FD:  GOTO   1FF
....................    address=0;  
01FE:  CLRF   53
....................  
.................... address += x-1;  
01FF:  MOVLW  01
0200:  SUBWF  51,W
0201:  ADDWF  53,F
.................... lcd_send_byte(0, 0x80 | address);  
0202:  MOVF   53,W
0203:  IORLW  80
0204:  MOVWF  54
0205:  CLRF   55
0206:  MOVF   54,W
0207:  MOVWF  56
0208:  CALL   106
.................... }  
0209:  RETURN
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
020A:  MOVF   50,W
020B:  XORLW  0C
020C:  BTFSC  03.2
020D:  GOTO   215
020E:  XORLW  06
020F:  BTFSC  03.2
0210:  GOTO   21D
0211:  XORLW  02
0212:  BTFSC  03.2
0213:  GOTO   223
0214:  GOTO   228
....................     case '\f':  
....................       lcd_send_byte(0,1);  
0215:  CLRF   55
0216:  MOVLW  01
0217:  MOVWF  56
0218:  CALL   106
....................       delay_ms(2);  
0219:  MOVLW  02
021A:  MOVWF  51
021B:  CALL   093
....................       break;  
021C:  GOTO   22D
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
021D:  MOVLW  01
021E:  MOVWF  51
021F:  MOVLW  02
0220:  MOVWF  52
0221:  CALL   1F8
....................        break;  
0222:  GOTO   22D
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0223:  CLRF   55
0224:  MOVLW  10
0225:  MOVWF  56
0226:  CALL   106
....................        break;  
0227:  GOTO   22D
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0228:  MOVLW  01
0229:  MOVWF  55
022A:  MOVF   50,W
022B:  MOVWF  56
022C:  CALL   106
....................        break;  
....................    }  
.................... }  
022D:  RETURN
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
.................... #include <1wire.c> 
.................... // (C) copyright 2003 j.d.sandoz / jds-pic !at! losdos.dyndns.org  
....................  
.................... // released under the GNU GENERAL PUBLIC LICENSE (GPL)  
.................... // refer to http://www.gnu.org/licenses/gpl.txt  
....................  
.................... // This program is free software; you can redistribute it and/or modify  
.................... // it under the terms of the GNU General Public License as published by  
.................... // the Free Software Foundation; either version 2 of the License, or  
.................... // (at your option) any later version.  
....................  
.................... // This program is distributed in the hope that it will be useful,  
.................... // but WITHOUT ANY WARRANTY; without even the implied warranty of  
.................... // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
.................... // GNU General Public License for more details.  
....................  
.................... // You should have received a copy of the GNU General Public License  
.................... // along with this program; if not, write to the Free Software  
.................... // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  
....................  
.................... /***********************1Wire Class***********************/  
.................... /*Description: This class handles all communication */  
.................... /* between the processor and the 1wire */  
.................... /* sensors.  
.................... /*********************************************************/  
....................  
.................... /*-------1-wire definitions-------*/  
.................... #define ONE_WIRE_PIN1 PIN_A0  
.................... #define ONE_WIRE_PIN2 PIN_A1 
....................  
.................... /*******************1-wire communication functions********************/  
....................  
.................... /************onewire_reset*************************************************/  
.................... /*This function initiates the 1wire bus */  
.................... /* */  
.................... /*PARAMETERS: */  
.................... /*RETURNS: */  
.................... /*********************************************************************/  
....................  
.................... void onewire1_reset()  // OK if just using a single permanently connected device  
.................... {  
....................  output_low(ONE_WIRE_PIN1);  
*
0624:  BSF    03.5
0625:  BCF    05.0
0626:  BCF    03.5
0627:  BCF    05.0
....................  delay_us( 500 ); // pull 1-wire low for reset pulse  
0628:  MOVLW  02
0629:  MOVWF  47
062A:  MOVLW  F9
062B:  MOVWF  48
062C:  CALL   615
062D:  DECFSZ 47,F
062E:  GOTO   62A
....................  output_float(ONE_WIRE_PIN1); // float 1-wire high  
062F:  BSF    03.5
0630:  BSF    05.0
....................  delay_us( 500 ); // wait-out remaining initialisation window.  
0631:  MOVLW  02
0632:  BCF    03.5
0633:  MOVWF  47
0634:  MOVLW  F9
0635:  MOVWF  48
0636:  CALL   615
0637:  DECFSZ 47,F
0638:  GOTO   634
....................  output_float(ONE_WIRE_PIN1);  
0639:  BSF    03.5
063A:  BSF    05.0
.................... }  
063B:  BCF    03.5
063C:  RETURN
.................... void onewire2_reset()  // OK if just using a single permanently connected device  
.................... {  
....................  output_low(ONE_WIRE_PIN2);  
*
0D2F:  BSF    03.5
0D30:  BCF    05.1
0D31:  BCF    03.5
0D32:  BCF    05.1
....................  delay_us( 500 ); // pull 1-wire low for reset pulse  
0D33:  MOVLW  02
0D34:  MOVWF  47
0D35:  MOVLW  F9
0D36:  MOVWF  48
0D37:  BCF    0A.3
0D38:  CALL   615
0D39:  BSF    0A.3
0D3A:  DECFSZ 47,F
0D3B:  GOTO   535
....................  output_float(ONE_WIRE_PIN2); // float 1-wire high  
0D3C:  BSF    03.5
0D3D:  BSF    05.1
....................  delay_us( 500 ); // wait-out remaining initialisation window.  
0D3E:  MOVLW  02
0D3F:  BCF    03.5
0D40:  MOVWF  47
0D41:  MOVLW  F9
0D42:  MOVWF  48
0D43:  BCF    0A.3
0D44:  CALL   615
0D45:  BSF    0A.3
0D46:  DECFSZ 47,F
0D47:  GOTO   541
....................  output_float(ONE_WIRE_PIN2);  
0D48:  BSF    03.5
0D49:  BSF    05.1
.................... }  
0D4A:  BCF    03.5
0D4B:  RETURN
.................... /*********************** onewire_write() ********************************/  
.................... /*This function writes a byte to the sensor.*/  
.................... /* */  
.................... /*Parameters: byte - the byte to be written to the 1-wire */  
.................... /*Returns: */  
.................... /*********************************************************************/  
....................  
.................... void onewire1_write(int data)  
.................... {  
....................  int count;  
....................  
....................  for (count=0; count<8; ++count)  
*
063D:  CLRF   48
063E:  MOVF   48,W
063F:  SUBLW  07
0640:  BTFSS  03.0
0641:  GOTO   664
....................  {  
....................   output_low(ONE_WIRE_PIN1);  
0642:  BSF    03.5
0643:  BCF    05.0
0644:  BCF    03.5
0645:  BCF    05.0
....................   delay_us( 2 ); // pull 1-wire low to initiate write time-slot.  
0646:  MOVLW  02
0647:  MOVWF  77
0648:  DECFSZ 77,F
0649:  GOTO   648
064A:  GOTO   64B
064B:  NOP
....................   output_bit(ONE_WIRE_PIN1, shift_right(&data,1,0)); // set output bit on 1-wire  
064C:  BCF    03.0
064D:  RRF    47,F
064E:  BTFSC  03.0
064F:  GOTO   652
0650:  BCF    05.0
0651:  GOTO   653
0652:  BSF    05.0
0653:  BSF    03.5
0654:  BCF    05.0
....................   delay_us( 60 ); // wait until end of write slot.  
0655:  MOVLW  63
0656:  MOVWF  77
0657:  DECFSZ 77,F
0658:  GOTO   657
0659:  GOTO   65A
....................   output_float(ONE_WIRE_PIN1); // set 1-wire high again,  
065A:  BSF    05.0
....................   delay_us( 2 ); // for more than 1us minimum.  
065B:  MOVLW  02
065C:  MOVWF  77
065D:  DECFSZ 77,F
065E:  GOTO   65D
065F:  GOTO   660
0660:  NOP
....................  }  
0661:  BCF    03.5
0662:  INCF   48,F
0663:  GOTO   63E
.................... }  
0664:  RETURN
.................... void onewire2_write(int data)  
.................... {  
....................  int count;  
....................  
....................  for (count=0; count<8; ++count)  
*
0D4C:  CLRF   48
0D4D:  MOVF   48,W
0D4E:  SUBLW  07
0D4F:  BTFSS  03.0
0D50:  GOTO   573
....................  {  
....................   output_low(ONE_WIRE_PIN2);  
0D51:  BSF    03.5
0D52:  BCF    05.1
0D53:  BCF    03.5
0D54:  BCF    05.1
....................   delay_us( 2 ); // pull 1-wire low to initiate write time-slot.  
0D55:  MOVLW  02
0D56:  MOVWF  77
0D57:  DECFSZ 77,F
0D58:  GOTO   557
0D59:  GOTO   55A
0D5A:  NOP
....................   output_bit(ONE_WIRE_PIN2, shift_right(&data,1,0)); // set output bit on 1-wire  
0D5B:  BCF    03.0
0D5C:  RRF    47,F
0D5D:  BTFSC  03.0
0D5E:  GOTO   561
0D5F:  BCF    05.1
0D60:  GOTO   562
0D61:  BSF    05.1
0D62:  BSF    03.5
0D63:  BCF    05.1
....................   delay_us( 60 ); // wait until end of write slot.  
0D64:  MOVLW  63
0D65:  MOVWF  77
0D66:  DECFSZ 77,F
0D67:  GOTO   566
0D68:  GOTO   569
....................   output_float(ONE_WIRE_PIN2); // set 1-wire high again,  
0D69:  BSF    05.1
....................   delay_us( 2 ); // for more than 1us minimum.  
0D6A:  MOVLW  02
0D6B:  MOVWF  77
0D6C:  DECFSZ 77,F
0D6D:  GOTO   56C
0D6E:  GOTO   56F
0D6F:  NOP
....................  }  
0D70:  BCF    03.5
0D71:  INCF   48,F
0D72:  GOTO   54D
.................... }  
0D73:  RETURN
.................... /*********************** read1wire() *********************************/  
.................... /*This function reads the 8 -bit data via the 1-wire sensor. */  
.................... /* */  
.................... /*Parameters: */  
.................... /*Returns: 8-bit (1-byte) data from sensor */  
.................... /*********************************************************************/  
....................  
.................... int onewire1_read()  
.................... {  
....................  int count, data;  
....................  
....................  for (count=0; count<8; ++count)  
*
0665:  CLRF   47
0666:  MOVF   47,W
0667:  SUBLW  07
0668:  BTFSS  03.0
0669:  GOTO   68B
....................  {  
....................   output_low(ONE_WIRE_PIN1);  
066A:  BSF    03.5
066B:  BCF    05.0
066C:  BCF    03.5
066D:  BCF    05.0
....................   delay_us( 2 ); // pull 1-wire low to initiate read time-slot.  
066E:  MOVLW  02
066F:  MOVWF  77
0670:  DECFSZ 77,F
0671:  GOTO   670
0672:  GOTO   673
0673:  NOP
....................   output_float(ONE_WIRE_PIN1); // now let 1-wire float high,  
0674:  BSF    03.5
0675:  BSF    05.0
....................   delay_us( 8 ); // let device state stabilise,  
0676:  MOVLW  0C
0677:  MOVWF  77
0678:  DECFSZ 77,F
0679:  GOTO   678
067A:  GOTO   67B
067B:  NOP
....................   shift_right(&data,1,input(ONE_WIRE_PIN1)); // and load result.  
067C:  BSF    05.0
067D:  BCF    03.5
067E:  BTFSC  05.0
067F:  GOTO   682
0680:  BCF    03.0
0681:  GOTO   683
0682:  BSF    03.0
0683:  RRF    48,F
....................   delay_us( 120 ); // wait until end of read slot.  
0684:  MOVLW  C7
0685:  MOVWF  77
0686:  DECFSZ 77,F
0687:  GOTO   686
0688:  GOTO   689
....................  }  
0689:  INCF   47,F
068A:  GOTO   666
....................  
....................  return( data );  
068B:  MOVF   48,W
068C:  MOVWF  78
.................... } 
068D:  RETURN
....................  
.................... int onewire2_read() 
.................... {  
....................  int count, data;  
....................  
....................  for (count=0; count<8; ++count)  
*
0D74:  CLRF   47
0D75:  MOVF   47,W
0D76:  SUBLW  07
0D77:  BTFSS  03.0
0D78:  GOTO   59A
....................  {  
....................   output_low(ONE_WIRE_PIN2);  
0D79:  BSF    03.5
0D7A:  BCF    05.1
0D7B:  BCF    03.5
0D7C:  BCF    05.1
....................   delay_us( 2 ); // pull 1-wire low to initiate read time-slot.  
0D7D:  MOVLW  02
0D7E:  MOVWF  77
0D7F:  DECFSZ 77,F
0D80:  GOTO   57F
0D81:  GOTO   582
0D82:  NOP
....................   output_float(ONE_WIRE_PIN2); // now let 1-wire float high,  
0D83:  BSF    03.5
0D84:  BSF    05.1
....................   delay_us( 8 ); // let device state stabilise,  
0D85:  MOVLW  0C
0D86:  MOVWF  77
0D87:  DECFSZ 77,F
0D88:  GOTO   587
0D89:  GOTO   58A
0D8A:  NOP
....................   shift_right(&data,1,input(ONE_WIRE_PIN2)); // and load result.  
0D8B:  BSF    05.1
0D8C:  BCF    03.5
0D8D:  BTFSC  05.1
0D8E:  GOTO   591
0D8F:  BCF    03.0
0D90:  GOTO   592
0D91:  BSF    03.0
0D92:  RRF    48,F
....................   delay_us( 120 ); // wait until end of read slot.  
0D93:  MOVLW  C7
0D94:  MOVWF  77
0D95:  DECFSZ 77,F
0D96:  GOTO   595
0D97:  GOTO   598
....................  }  
0D98:  INCF   47,F
0D99:  GOTO   575
....................  
....................  return( data );  
0D9A:  MOVF   48,W
0D9B:  MOVWF  78
.................... } 
0D9C:  RETURN
....................  
.................... #include <ds1820.c> 
.................... float ds1820_read1()  
.................... {  
*
0DA1:  CLRF   3E
....................  int8 busy=0, temp1, temp2;  
....................  signed int16 temp3;  
....................  float result;  
....................  
....................  onewire1_reset();  
0DA2:  BCF    0A.3
0DA3:  CALL   624
0DA4:  BSF    0A.3
....................  onewire1_write(0xCC);  
0DA5:  MOVLW  CC
0DA6:  MOVWF  47
0DA7:  BCF    0A.3
0DA8:  CALL   63D
0DA9:  BSF    0A.3
....................  onewire1_write(0x44);  
0DAA:  MOVLW  44
0DAB:  MOVWF  47
0DAC:  BCF    0A.3
0DAD:  CALL   63D
0DAE:  BSF    0A.3
....................  
....................  while (busy == 0)  
....................   busy = onewire1_read();  
0DAF:  MOVF   3E,F
0DB0:  BTFSS  03.2
0DB1:  GOTO   5B8
0DB2:  BCF    0A.3
0DB3:  CALL   665
0DB4:  BSF    0A.3
0DB5:  MOVF   78,W
0DB6:  MOVWF  3E
0DB7:  GOTO   5AF
....................  
....................  onewire1_reset();  
0DB8:  BCF    0A.3
0DB9:  CALL   624
0DBA:  BSF    0A.3
....................  onewire1_write(0xCC);  
0DBB:  MOVLW  CC
0DBC:  MOVWF  47
0DBD:  BCF    0A.3
0DBE:  CALL   63D
0DBF:  BSF    0A.3
....................  onewire1_write(0xBE);  
0DC0:  MOVLW  BE
0DC1:  MOVWF  47
0DC2:  BCF    0A.3
0DC3:  CALL   63D
0DC4:  BSF    0A.3
....................  temp1 = onewire1_read();  
0DC5:  BCF    0A.3
0DC6:  CALL   665
0DC7:  BSF    0A.3
0DC8:  MOVF   78,W
0DC9:  MOVWF  3F
....................  temp2 = onewire1_read();  
0DCA:  BCF    0A.3
0DCB:  CALL   665
0DCC:  BSF    0A.3
0DCD:  MOVF   78,W
0DCE:  MOVWF  40
....................  temp3 = make16(temp2, temp1);  
0DCF:  MOVF   40,W
0DD0:  MOVWF  42
0DD1:  MOVF   3F,W
0DD2:  MOVWF  41
....................    
.................... // result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution  
....................  result = (float) temp3 / 16.0;  //Calculation for DS18B20 with 0.1 deg C resolution  
0DD3:  MOVF   42,W
0DD4:  MOVWF  48
0DD5:  MOVF   41,W
0DD6:  MOVWF  47
0DD7:  BCF    0A.3
0DD8:  CALL   68E
0DD9:  BSF    0A.3
0DDA:  MOVF   77,W
0DDB:  MOVWF  47
0DDC:  MOVF   78,W
0DDD:  MOVWF  48
0DDE:  MOVF   79,W
0DDF:  MOVWF  49
0DE0:  MOVF   7A,W
0DE1:  MOVWF  4A
0DE2:  MOVWF  4E
0DE3:  MOVF   79,W
0DE4:  MOVWF  4D
0DE5:  MOVF   78,W
0DE6:  MOVWF  4C
0DE7:  MOVF   77,W
0DE8:  MOVWF  4B
0DE9:  CLRF   52
0DEA:  CLRF   51
0DEB:  CLRF   50
0DEC:  MOVLW  83
0DED:  MOVWF  4F
0DEE:  BCF    0A.3
0DEF:  CALL   6B3
0DF0:  BSF    0A.3
0DF1:  MOVF   7A,W
0DF2:  MOVWF  46
0DF3:  MOVF   79,W
0DF4:  MOVWF  45
0DF5:  MOVF   78,W
0DF6:  MOVWF  44
0DF7:  MOVF   77,W
0DF8:  MOVWF  43
....................    
....................  delay_ms(200);  
0DF9:  MOVLW  C8
0DFA:  MOVWF  51
0DFB:  BCF    0A.3
0DFC:  CALL   093
0DFD:  BSF    0A.3
....................  return(result);  
0DFE:  MOVF   43,W
0DFF:  MOVWF  77
0E00:  MOVF   44,W
0E01:  MOVWF  78
0E02:  MOVF   45,W
0E03:  MOVWF  79
0E04:  MOVF   46,W
0E05:  MOVWF  7A
.................... } 
....................  
.................... float ds1820_read2()  
.................... {  
*
0E20:  CLRF   3E
....................  int8 busy=0, temp1, temp2;  
....................  signed int16 temp3;  
....................  float result;  
....................  
....................  onewire2_reset();  
0E21:  CALL   52F
....................  onewire2_write(0xCC);  
0E22:  MOVLW  CC
0E23:  MOVWF  47
0E24:  CALL   54C
....................  onewire2_write(0x44);  
0E25:  MOVLW  44
0E26:  MOVWF  47
0E27:  CALL   54C
....................  
....................  while (busy == 0)  
....................   busy = onewire2_read();  
0E28:  MOVF   3E,F
0E29:  BTFSS  03.2
0E2A:  GOTO   62F
0E2B:  CALL   574
0E2C:  MOVF   78,W
0E2D:  MOVWF  3E
0E2E:  GOTO   628
....................  
....................  onewire2_reset();  
0E2F:  CALL   52F
....................  onewire2_write(0xCC);  
0E30:  MOVLW  CC
0E31:  MOVWF  47
0E32:  CALL   54C
....................  onewire2_write(0xBE);  
0E33:  MOVLW  BE
0E34:  MOVWF  47
0E35:  CALL   54C
....................  temp1 = onewire2_read();  
0E36:  CALL   574
0E37:  MOVF   78,W
0E38:  MOVWF  3F
....................  temp2 = onewire2_read();  
0E39:  CALL   574
0E3A:  MOVF   78,W
0E3B:  MOVWF  40
....................  temp3 = make16(temp2, temp1);  
0E3C:  MOVF   40,W
0E3D:  MOVWF  42
0E3E:  MOVF   3F,W
0E3F:  MOVWF  41
....................    
.................... // result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution  
....................  result = (float) temp3 / 16.0;  //Calculation for DS18B20 with 0.1 deg C resolution  
0E40:  MOVF   42,W
0E41:  MOVWF  48
0E42:  MOVF   41,W
0E43:  MOVWF  47
0E44:  BCF    0A.3
0E45:  CALL   68E
0E46:  BSF    0A.3
0E47:  MOVF   77,W
0E48:  MOVWF  47
0E49:  MOVF   78,W
0E4A:  MOVWF  48
0E4B:  MOVF   79,W
0E4C:  MOVWF  49
0E4D:  MOVF   7A,W
0E4E:  MOVWF  4A
0E4F:  MOVWF  4E
0E50:  MOVF   79,W
0E51:  MOVWF  4D
0E52:  MOVF   78,W
0E53:  MOVWF  4C
0E54:  MOVF   77,W
0E55:  MOVWF  4B
0E56:  CLRF   52
0E57:  CLRF   51
0E58:  CLRF   50
0E59:  MOVLW  83
0E5A:  MOVWF  4F
0E5B:  BCF    0A.3
0E5C:  CALL   6B3
0E5D:  BSF    0A.3
0E5E:  MOVF   7A,W
0E5F:  MOVWF  46
0E60:  MOVF   79,W
0E61:  MOVWF  45
0E62:  MOVF   78,W
0E63:  MOVWF  44
0E64:  MOVF   77,W
0E65:  MOVWF  43
....................    
....................  delay_ms(200);  
0E66:  MOVLW  C8
0E67:  MOVWF  51
0E68:  BCF    0A.3
0E69:  CALL   093
0E6A:  BSF    0A.3
....................  return(result);  
0E6B:  MOVF   43,W
0E6C:  MOVWF  77
0E6D:  MOVF   44,W
0E6E:  MOVWF  78
0E6F:  MOVF   45,W
0E70:  MOVWF  79
0E71:  MOVF   46,W
0E72:  MOVWF  7A
.................... } 
....................  
.................... #include "DS1307.c" 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3 
....................  
.................... #use i2c(master, fast, sda=RTC_SDA, scl=RTC_SCL) 
*
0143:  MOVLW  08
0144:  MOVWF  78
0145:  NOP
0146:  BCF    07.3
0147:  BCF    20.3
0148:  MOVF   20,W
0149:  BSF    03.5
014A:  MOVWF  07
014B:  NOP
014C:  BCF    03.5
014D:  RLF    42,F
014E:  BCF    07.4
014F:  BTFSS  03.0
0150:  GOTO   157
0151:  BSF    20.4
0152:  MOVF   20,W
0153:  BSF    03.5
0154:  MOVWF  07
0155:  GOTO   15B
0156:  BCF    03.5
0157:  BCF    20.4
0158:  MOVF   20,W
0159:  BSF    03.5
015A:  MOVWF  07
015B:  NOP
015C:  BCF    03.5
015D:  BSF    20.3
015E:  MOVF   20,W
015F:  BSF    03.5
0160:  MOVWF  07
0161:  BCF    03.5
0162:  BTFSS  07.3
0163:  GOTO   162
0164:  DECFSZ 78,F
0165:  GOTO   145
0166:  NOP
0167:  BCF    07.3
0168:  BCF    20.3
0169:  MOVF   20,W
016A:  BSF    03.5
016B:  MOVWF  07
016C:  NOP
016D:  BCF    03.5
016E:  BSF    20.4
016F:  MOVF   20,W
0170:  BSF    03.5
0171:  MOVWF  07
0172:  NOP
0173:  NOP
0174:  BCF    03.5
0175:  BSF    20.3
0176:  MOVF   20,W
0177:  BSF    03.5
0178:  MOVWF  07
0179:  BCF    03.5
017A:  BTFSS  07.3
017B:  GOTO   17A
017C:  CLRF   78
017D:  NOP
017E:  BTFSC  07.4
017F:  BSF    78.0
0180:  BCF    07.3
0181:  BCF    20.3
0182:  MOVF   20,W
0183:  BSF    03.5
0184:  MOVWF  07
0185:  BCF    03.5
0186:  BCF    07.4
0187:  BCF    20.4
0188:  MOVF   20,W
0189:  BSF    03.5
018A:  MOVWF  07
018B:  BCF    03.5
018C:  RETURN
018D:  MOVLW  08
018E:  MOVWF  42
018F:  MOVF   77,W
0190:  MOVWF  43
0191:  BSF    20.4
0192:  MOVF   20,W
0193:  BSF    03.5
0194:  MOVWF  07
0195:  NOP
0196:  BCF    03.5
0197:  BSF    20.3
0198:  MOVF   20,W
0199:  BSF    03.5
019A:  MOVWF  07
019B:  BCF    03.5
019C:  BTFSS  07.3
019D:  GOTO   19C
019E:  BTFSC  07.4
019F:  BSF    03.0
01A0:  BTFSS  07.4
01A1:  BCF    03.0
01A2:  RLF    78,F
01A3:  NOP
01A4:  BCF    20.3
01A5:  MOVF   20,W
01A6:  BSF    03.5
01A7:  MOVWF  07
01A8:  BCF    03.5
01A9:  BCF    07.3
01AA:  DECFSZ 42,F
01AB:  GOTO   191
01AC:  BSF    20.4
01AD:  MOVF   20,W
01AE:  BSF    03.5
01AF:  MOVWF  07
01B0:  NOP
01B1:  BCF    03.5
01B2:  BCF    07.4
01B3:  MOVF   43,W
01B4:  BTFSC  03.2
01B5:  GOTO   1BB
01B6:  BCF    20.4
01B7:  MOVF   20,W
01B8:  BSF    03.5
01B9:  MOVWF  07
01BA:  BCF    03.5
01BB:  NOP
01BC:  BSF    20.3
01BD:  MOVF   20,W
01BE:  BSF    03.5
01BF:  MOVWF  07
01C0:  BCF    03.5
01C1:  BTFSS  07.3
01C2:  GOTO   1C1
01C3:  NOP
01C4:  BCF    07.3
01C5:  BCF    20.3
01C6:  MOVF   20,W
01C7:  BSF    03.5
01C8:  MOVWF  07
01C9:  NOP
01CA:  BCF    03.5
01CB:  BCF    07.4
01CC:  BCF    20.4
01CD:  MOVF   20,W
01CE:  BSF    03.5
01CF:  MOVWF  07
01D0:  BCF    03.5
01D1:  RETURN
....................  
.................... //BYTE bin2bcd(BYTE binary_value); 
.................... //BYTE bcd2bin(BYTE bcd_value); 
....................  
.................... int8 bin2bcd(int8 binary_value) 
.................... { 
....................   int8 temp; 
....................   char retval; 
....................  
....................   temp = binary_value; 
*
01E5:  MOVF   41,W
01E6:  MOVWF  42
....................   retval = 0; 
01E7:  CLRF   43
....................  
....................   while(1) 
....................   { 
....................     // Get the tens digit by doing multiple subtraction 
....................     // of 10 from the binary value. 
....................     if(temp >= 10) 
01E8:  MOVF   42,W
01E9:  SUBLW  09
01EA:  BTFSC  03.0
01EB:  GOTO   1F1
....................     { 
....................       temp -= 10; 
01EC:  MOVLW  0A
01ED:  SUBWF  42,F
....................       retval += 0x10; 
01EE:  MOVLW  10
01EF:  ADDWF  43,F
....................     } 
....................     else // Get the ones digit by adding the remainder. 
01F0:  GOTO   1F4
....................     { 
....................       retval += temp; 
01F1:  MOVF   42,W
01F2:  ADDWF  43,F
....................       break; 
01F3:  GOTO   1F5
....................     } 
....................   } 
01F4:  GOTO   1E8
....................  
....................   return(retval); 
01F5:  MOVF   43,W
01F6:  MOVWF  78
.................... } 
01F7:  RETURN
....................  
.................... // Input range - 00 to 99. 
.................... char bcd2bin(char bcd_value) 
.................... { 
....................   char temp; 
....................  
....................   temp = bcd_value; 
*
01D2:  MOVF   42,W
01D3:  MOVWF  43
....................   // Shifting upper digit right by 1 is same as multiplying by 8. 
....................   temp >>= 1; 
01D4:  BCF    03.0
01D5:  RRF    43,F
....................   // Isolate the bits for the upper digit. 
....................   temp &= 0x78; 
01D6:  MOVLW  78
01D7:  ANDWF  43,F
....................  
....................   // Now return: (Tens * 8) + (Tens * 2) + Ones 
....................  
....................   return(temp + (temp >> 2) + (bcd_value & 0x0f)); 
01D8:  RRF    43,W
01D9:  MOVWF  77
01DA:  RRF    77,F
01DB:  MOVLW  3F
01DC:  ANDWF  77,F
01DD:  MOVF   77,W
01DE:  ADDWF  43,W
01DF:  MOVWF  44
01E0:  MOVF   42,W
01E1:  ANDLW  0F
01E2:  ADDWF  44,W
01E3:  MOVWF  78
.................... } 
01E4:  RETURN
....................  
.................... void ds1307_init(void) 
.................... { 
*
104A:  CLRF   3E
....................    BYTE seconds = 0; 
....................  
....................    i2c_start(); 
104B:  BSF    20.4
104C:  MOVF   20,W
104D:  BSF    03.5
104E:  MOVWF  07
104F:  NOP
1050:  BCF    03.5
1051:  BSF    20.3
1052:  MOVF   20,W
1053:  BSF    03.5
1054:  MOVWF  07
1055:  NOP
1056:  BCF    03.5
1057:  BCF    07.4
1058:  BCF    20.4
1059:  MOVF   20,W
105A:  BSF    03.5
105B:  MOVWF  07
105C:  NOP
105D:  BCF    03.5
105E:  BCF    07.3
105F:  BCF    20.3
1060:  MOVF   20,W
1061:  BSF    03.5
1062:  MOVWF  07
....................    i2c_write(0xD0);      // WR to RTC 
1063:  MOVLW  D0
1064:  BCF    03.5
1065:  MOVWF  42
1066:  BCF    0A.4
1067:  CALL   143
1068:  BSF    0A.4
....................    i2c_write(0x00);      // REG 0 
1069:  CLRF   42
106A:  BCF    0A.4
106B:  CALL   143
106C:  BSF    0A.4
....................    i2c_start(); 
106D:  BSF    20.4
106E:  MOVF   20,W
106F:  BSF    03.5
1070:  MOVWF  07
1071:  NOP
1072:  BCF    03.5
1073:  BSF    20.3
1074:  MOVF   20,W
1075:  BSF    03.5
1076:  MOVWF  07
1077:  NOP
1078:  BCF    03.5
1079:  BTFSS  07.3
107A:  GOTO   079
107B:  BCF    07.4
107C:  BCF    20.4
107D:  MOVF   20,W
107E:  BSF    03.5
107F:  MOVWF  07
1080:  NOP
1081:  BCF    03.5
1082:  BCF    07.3
1083:  BCF    20.3
1084:  MOVF   20,W
1085:  BSF    03.5
1086:  MOVWF  07
....................    i2c_write(0xD1);      // RD from RTC 
1087:  MOVLW  D1
1088:  BCF    03.5
1089:  MOVWF  42
108A:  BCF    0A.4
108B:  CALL   143
108C:  BSF    0A.4
....................    seconds = bcd2bin(i2c_read(0)); // Read current "seconds" in DS1307 
108D:  CLRF   77
108E:  BCF    0A.4
108F:  CALL   18D
1090:  BSF    0A.4
1091:  MOVF   78,W
1092:  MOVWF  3F
1093:  MOVWF  42
1094:  BCF    0A.4
1095:  CALL   1D2
1096:  BSF    0A.4
1097:  MOVF   78,W
1098:  MOVWF  3E
....................    i2c_stop(); 
1099:  BCF    20.4
109A:  MOVF   20,W
109B:  BSF    03.5
109C:  MOVWF  07
109D:  NOP
109E:  BCF    03.5
109F:  BSF    20.3
10A0:  MOVF   20,W
10A1:  BSF    03.5
10A2:  MOVWF  07
10A3:  BCF    03.5
10A4:  BTFSS  07.3
10A5:  GOTO   0A4
10A6:  NOP
10A7:  GOTO   0A8
10A8:  NOP
10A9:  BSF    20.4
10AA:  MOVF   20,W
10AB:  BSF    03.5
10AC:  MOVWF  07
10AD:  NOP
....................    seconds &= 0x7F; 
10AE:  BCF    03.5
10AF:  BCF    3E.7
....................  
....................    delay_us(3); 
10B0:  MOVLW  04
10B1:  MOVWF  77
10B2:  DECFSZ 77,F
10B3:  GOTO   0B2
10B4:  GOTO   0B5
....................  
....................    i2c_start(); 
10B5:  BSF    20.4
10B6:  MOVF   20,W
10B7:  BSF    03.5
10B8:  MOVWF  07
10B9:  NOP
10BA:  BCF    03.5
10BB:  BSF    20.3
10BC:  MOVF   20,W
10BD:  BSF    03.5
10BE:  MOVWF  07
10BF:  NOP
10C0:  BCF    03.5
10C1:  BCF    07.4
10C2:  BCF    20.4
10C3:  MOVF   20,W
10C4:  BSF    03.5
10C5:  MOVWF  07
10C6:  NOP
10C7:  BCF    03.5
10C8:  BCF    07.3
10C9:  BCF    20.3
10CA:  MOVF   20,W
10CB:  BSF    03.5
10CC:  MOVWF  07
....................    i2c_write(0xD0);      // WR to RTC 
10CD:  MOVLW  D0
10CE:  BCF    03.5
10CF:  MOVWF  42
10D0:  BCF    0A.4
10D1:  CALL   143
10D2:  BSF    0A.4
....................    i2c_write(0x00);      // REG 0 
10D3:  CLRF   42
10D4:  BCF    0A.4
10D5:  CALL   143
10D6:  BSF    0A.4
....................    i2c_write(bin2bcd(seconds));     // Start oscillator with current "seconds value 
10D7:  MOVF   3E,W
10D8:  MOVWF  41
10D9:  BCF    0A.4
10DA:  CALL   1E5
10DB:  BSF    0A.4
10DC:  MOVF   78,W
10DD:  MOVWF  3F
10DE:  MOVWF  42
10DF:  BCF    0A.4
10E0:  CALL   143
10E1:  BSF    0A.4
....................    i2c_start(); 
10E2:  BSF    20.4
10E3:  MOVF   20,W
10E4:  BSF    03.5
10E5:  MOVWF  07
10E6:  NOP
10E7:  BCF    03.5
10E8:  BSF    20.3
10E9:  MOVF   20,W
10EA:  BSF    03.5
10EB:  MOVWF  07
10EC:  NOP
10ED:  BCF    03.5
10EE:  BTFSS  07.3
10EF:  GOTO   0EE
10F0:  BCF    07.4
10F1:  BCF    20.4
10F2:  MOVF   20,W
10F3:  BSF    03.5
10F4:  MOVWF  07
10F5:  NOP
10F6:  BCF    03.5
10F7:  BCF    07.3
10F8:  BCF    20.3
10F9:  MOVF   20,W
10FA:  BSF    03.5
10FB:  MOVWF  07
....................    i2c_write(0xD0);      // WR to RTC 
10FC:  MOVLW  D0
10FD:  BCF    03.5
10FE:  MOVWF  42
10FF:  BCF    0A.4
1100:  CALL   143
1101:  BSF    0A.4
....................    i2c_write(0x07);      // Control Register 
1102:  MOVLW  07
1103:  MOVWF  42
1104:  BCF    0A.4
1105:  CALL   143
1106:  BSF    0A.4
....................    i2c_write(0x80);     // Disable squarewave output pin 
1107:  MOVLW  80
1108:  MOVWF  42
1109:  BCF    0A.4
110A:  CALL   143
110B:  BSF    0A.4
....................    i2c_stop(); 
110C:  BCF    20.4
110D:  MOVF   20,W
110E:  BSF    03.5
110F:  MOVWF  07
1110:  NOP
1111:  BCF    03.5
1112:  BSF    20.3
1113:  MOVF   20,W
1114:  BSF    03.5
1115:  MOVWF  07
1116:  BCF    03.5
1117:  BTFSS  07.3
1118:  GOTO   117
1119:  NOP
111A:  GOTO   11B
111B:  NOP
111C:  BSF    20.4
111D:  MOVF   20,W
111E:  BSF    03.5
111F:  MOVWF  07
1120:  NOP
....................  
.................... } 
....................  
.................... void ds1307_set_date_time(BYTE day, int8 mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec) 
.................... { 
....................   sec &= 0x7F; 
....................   hr &= 0x3F; 
....................  
....................   i2c_start(); 
....................   i2c_write(0xD0);            // I2C write address 
....................   i2c_write(0x00);            // Start at REG 0 - Seconds 
....................   i2c_write(bin2bcd(sec));      // REG 0 
....................   i2c_write(bin2bcd(min));      // REG 1 
....................   i2c_write(bin2bcd(hr));      // REG 2 
....................   i2c_write(bin2bcd(dow));      // REG 3 
....................   i2c_write(bin2bcd(day));      // REG 4 
....................   i2c_write(bin2bcd(mth));      // REG 5 
....................   i2c_write(bin2bcd(year));      // REG 6 
....................   i2c_write(0x80);            // REG 7 - Disable squarewave output pin 
....................   i2c_stop(); 
.................... } 
....................  
.................... void ds1307_set_time(byte hr, byte min, byte sec) 
.................... { 
....................   sec &= 0x7F; 
*
0339:  BCF    40.7
....................   hr &= 0x3F; 
033A:  MOVLW  3F
033B:  ANDWF  3E,F
....................   i2c_start(); 
033C:  BSF    20.4
033D:  MOVF   20,W
033E:  BSF    03.5
033F:  MOVWF  07
0340:  NOP
0341:  BCF    03.5
0342:  BSF    20.3
0343:  MOVF   20,W
0344:  BSF    03.5
0345:  MOVWF  07
0346:  NOP
0347:  BCF    03.5
0348:  BCF    07.4
0349:  BCF    20.4
034A:  MOVF   20,W
034B:  BSF    03.5
034C:  MOVWF  07
034D:  NOP
034E:  BCF    03.5
034F:  BCF    07.3
0350:  BCF    20.3
0351:  MOVF   20,W
0352:  BSF    03.5
0353:  MOVWF  07
....................   i2c_write(0xD0);            // I2C write address 
0354:  MOVLW  D0
0355:  BCF    03.5
0356:  MOVWF  42
0357:  CALL   143
....................   i2c_write(0x00);            // Start at REG 0 - Seconds 
0358:  CLRF   42
0359:  CALL   143
....................   i2c_write(bin2bcd(sec));      // REG 0 
035A:  MOVF   40,W
035B:  MOVWF  41
035C:  CALL   1E5
035D:  MOVF   78,W
035E:  MOVWF  41
035F:  MOVWF  42
0360:  CALL   143
....................   i2c_write(bin2bcd(min));      // REG 1 
0361:  MOVF   3F,W
0362:  MOVWF  41
0363:  CALL   1E5
0364:  MOVF   78,W
0365:  MOVWF  41
0366:  MOVWF  42
0367:  CALL   143
....................   i2c_write(bin2bcd(hr));      // REG 2 
0368:  MOVF   3E,W
0369:  MOVWF  41
036A:  CALL   1E5
036B:  MOVF   78,W
036C:  MOVWF  41
036D:  MOVWF  42
036E:  CALL   143
....................   //i2c_write(0x80);            // REG 7 - Disable squarewave output pin 
....................   i2c_stop(); 
036F:  BCF    20.4
0370:  MOVF   20,W
0371:  BSF    03.5
0372:  MOVWF  07
0373:  NOP
0374:  BCF    03.5
0375:  BSF    20.3
0376:  MOVF   20,W
0377:  BSF    03.5
0378:  MOVWF  07
0379:  BCF    03.5
037A:  BTFSS  07.3
037B:  GOTO   37A
037C:  NOP
037D:  GOTO   37E
037E:  NOP
037F:  BSF    20.4
0380:  MOVF   20,W
0381:  BSF    03.5
0382:  MOVWF  07
0383:  NOP
.................... } 
0384:  BCF    03.5
0385:  RETURN
....................  
.................... void ds1307_set_date(byte day, byte mth, byte year, byte dow) 
.................... { 
....................   
....................   i2c_start(); 
....................   i2c_write(0xD0);            // I2C write address 
....................   i2c_write(0x03);            // Start at REG 0 - Seconds 
....................   i2c_write(bin2bcd(dow)); 
....................   i2c_write(bin2bcd(day)); 
....................   i2c_write(bin2bcd(mth)); 
....................   i2c_write(bin2bcd(year)); 
....................   i2c_write(0x80);            // REG 7 - Disable squarewave output pin 
....................   i2c_stop(); 
.................... } 
....................  
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow) 
.................... { 
....................   i2c_start(); 
....................   i2c_write(0xD0); 
....................   i2c_write(0x03);            // Start at REG 3 - Day of week 
....................   i2c_start(); 
....................   i2c_write(0xD1); 
....................   dow  = bcd2bin(i2c_read() & 0x7f);   // REG 3 
....................   day  = bcd2bin(i2c_read() & 0x3f);   // REG 4 
....................   mth  = bcd2bin(i2c_read() & 0x1f);   // REG 5 
....................   year = bcd2bin(i2c_read(0));            // REG 6 
....................   i2c_stop(); 
.................... } 
....................  
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec) 
.................... { 
....................   i2c_start(); 
*
0542:  BSF    20.4
0543:  MOVF   20,W
0544:  BSF    03.5
0545:  MOVWF  07
0546:  NOP
0547:  BCF    03.5
0548:  BSF    20.3
0549:  MOVF   20,W
054A:  BSF    03.5
054B:  MOVWF  07
054C:  NOP
054D:  BCF    03.5
054E:  BCF    07.4
054F:  BCF    20.4
0550:  MOVF   20,W
0551:  BSF    03.5
0552:  MOVWF  07
0553:  NOP
0554:  BCF    03.5
0555:  BCF    07.3
0556:  BCF    20.3
0557:  MOVF   20,W
0558:  BSF    03.5
0559:  MOVWF  07
*
0EFC:  BSF    20.4
0EFD:  MOVF   20,W
0EFE:  BSF    03.5
0EFF:  MOVWF  07
0F00:  NOP
0F01:  BCF    03.5
0F02:  BSF    20.3
0F03:  MOVF   20,W
0F04:  BSF    03.5
0F05:  MOVWF  07
0F06:  NOP
0F07:  BCF    03.5
0F08:  BCF    07.4
0F09:  BCF    20.4
0F0A:  MOVF   20,W
0F0B:  BSF    03.5
0F0C:  MOVWF  07
0F0D:  NOP
0F0E:  BCF    03.5
0F0F:  BCF    07.3
0F10:  BCF    20.3
0F11:  MOVF   20,W
0F12:  BSF    03.5
0F13:  MOVWF  07
*
11AE:  BSF    20.4
11AF:  MOVF   20,W
11B0:  BSF    03.5
11B1:  MOVWF  07
11B2:  NOP
11B3:  BCF    03.5
11B4:  BSF    20.3
11B5:  MOVF   20,W
11B6:  BSF    03.5
11B7:  MOVWF  07
11B8:  NOP
11B9:  BCF    03.5
11BA:  BCF    07.4
11BB:  BCF    20.4
11BC:  MOVF   20,W
11BD:  BSF    03.5
11BE:  MOVWF  07
11BF:  NOP
11C0:  BCF    03.5
11C1:  BCF    07.3
11C2:  BCF    20.3
11C3:  MOVF   20,W
11C4:  BSF    03.5
11C5:  MOVWF  07
....................   i2c_write(0xD0); 
*
055A:  MOVLW  D0
055B:  BCF    03.5
055C:  MOVWF  42
055D:  CALL   143
*
0F14:  MOVLW  D0
0F15:  BCF    03.5
0F16:  MOVWF  42
0F17:  BCF    0A.3
0F18:  CALL   143
0F19:  BSF    0A.3
*
11C6:  MOVLW  D0
11C7:  BCF    03.5
11C8:  MOVWF  42
11C9:  BCF    0A.4
11CA:  CALL   143
11CB:  BSF    0A.4
....................   i2c_write(0x00);            // Start at REG 0 - Seconds 
*
055E:  CLRF   42
055F:  CALL   143
*
0F1A:  CLRF   42
0F1B:  BCF    0A.3
0F1C:  CALL   143
0F1D:  BSF    0A.3
*
11CC:  CLRF   42
11CD:  BCF    0A.4
11CE:  CALL   143
11CF:  BSF    0A.4
....................   i2c_start(); 
*
0560:  BSF    20.4
0561:  MOVF   20,W
0562:  BSF    03.5
0563:  MOVWF  07
0564:  NOP
0565:  BCF    03.5
0566:  BSF    20.3
0567:  MOVF   20,W
0568:  BSF    03.5
0569:  MOVWF  07
056A:  NOP
056B:  BCF    03.5
056C:  BTFSS  07.3
056D:  GOTO   56C
056E:  BCF    07.4
056F:  BCF    20.4
0570:  MOVF   20,W
0571:  BSF    03.5
0572:  MOVWF  07
0573:  NOP
0574:  BCF    03.5
0575:  BCF    07.3
0576:  BCF    20.3
0577:  MOVF   20,W
0578:  BSF    03.5
0579:  MOVWF  07
*
0F1E:  BSF    20.4
0F1F:  MOVF   20,W
0F20:  BSF    03.5
0F21:  MOVWF  07
0F22:  NOP
0F23:  BCF    03.5
0F24:  BSF    20.3
0F25:  MOVF   20,W
0F26:  BSF    03.5
0F27:  MOVWF  07
0F28:  NOP
0F29:  BCF    03.5
0F2A:  BTFSS  07.3
0F2B:  GOTO   72A
0F2C:  BCF    07.4
0F2D:  BCF    20.4
0F2E:  MOVF   20,W
0F2F:  BSF    03.5
0F30:  MOVWF  07
0F31:  NOP
0F32:  BCF    03.5
0F33:  BCF    07.3
0F34:  BCF    20.3
0F35:  MOVF   20,W
0F36:  BSF    03.5
0F37:  MOVWF  07
*
11D0:  BSF    20.4
11D1:  MOVF   20,W
11D2:  BSF    03.5
11D3:  MOVWF  07
11D4:  NOP
11D5:  BCF    03.5
11D6:  BSF    20.3
11D7:  MOVF   20,W
11D8:  BSF    03.5
11D9:  MOVWF  07
11DA:  NOP
11DB:  BCF    03.5
11DC:  BTFSS  07.3
11DD:  GOTO   1DC
11DE:  BCF    07.4
11DF:  BCF    20.4
11E0:  MOVF   20,W
11E1:  BSF    03.5
11E2:  MOVWF  07
11E3:  NOP
11E4:  BCF    03.5
11E5:  BCF    07.3
11E6:  BCF    20.3
11E7:  MOVF   20,W
11E8:  BSF    03.5
11E9:  MOVWF  07
....................   i2c_write(0xD1); 
*
057A:  MOVLW  D1
057B:  BCF    03.5
057C:  MOVWF  42
057D:  CALL   143
*
0F38:  MOVLW  D1
0F39:  BCF    03.5
0F3A:  MOVWF  42
0F3B:  BCF    0A.3
0F3C:  CALL   143
0F3D:  BSF    0A.3
*
11EA:  MOVLW  D1
11EB:  BCF    03.5
11EC:  MOVWF  42
11ED:  BCF    0A.4
11EE:  CALL   143
11EF:  BSF    0A.4
....................   sec = bcd2bin(i2c_read() & 0x7f); 
*
057E:  MOVLW  01
057F:  MOVWF  77
0580:  CALL   18D
0581:  MOVF   78,W
0582:  ANDLW  7F
0583:  MOVWF  3E
0584:  MOVWF  42
0585:  CALL   1D2
0586:  MOVF   78,W
0587:  MOVWF  21
*
0F3E:  MOVLW  01
0F3F:  MOVWF  77
0F40:  BCF    0A.3
0F41:  CALL   18D
0F42:  BSF    0A.3
0F43:  MOVF   78,W
0F44:  ANDLW  7F
0F45:  MOVWF  3E
0F46:  MOVWF  42
0F47:  BCF    0A.3
0F48:  CALL   1D2
0F49:  BSF    0A.3
0F4A:  MOVF   78,W
0F4B:  MOVWF  21
*
11F0:  MOVLW  01
11F1:  MOVWF  77
11F2:  BCF    0A.4
11F3:  CALL   18D
11F4:  BSF    0A.4
11F5:  MOVF   78,W
11F6:  ANDLW  7F
11F7:  MOVWF  3E
11F8:  MOVWF  42
11F9:  BCF    0A.4
11FA:  CALL   1D2
11FB:  BSF    0A.4
11FC:  MOVF   78,W
11FD:  MOVWF  21
....................   min = bcd2bin(i2c_read() & 0x7f); 
*
0588:  MOVLW  01
0589:  MOVWF  77
058A:  CALL   18D
058B:  MOVF   78,W
058C:  ANDLW  7F
058D:  MOVWF  3E
058E:  MOVWF  42
058F:  CALL   1D2
0590:  MOVF   78,W
0591:  MOVWF  35
*
0F4C:  MOVLW  01
0F4D:  MOVWF  77
0F4E:  BCF    0A.3
0F4F:  CALL   18D
0F50:  BSF    0A.3
0F51:  MOVF   78,W
0F52:  ANDLW  7F
0F53:  MOVWF  3E
0F54:  MOVWF  42
0F55:  BCF    0A.3
0F56:  CALL   1D2
0F57:  BSF    0A.3
0F58:  MOVF   78,W
0F59:  MOVWF  22
*
11FE:  MOVLW  01
11FF:  MOVWF  77
1200:  BCF    0A.4
1201:  CALL   18D
1202:  BSF    0A.4
1203:  MOVF   78,W
1204:  ANDLW  7F
1205:  MOVWF  3E
1206:  MOVWF  42
1207:  BCF    0A.4
1208:  CALL   1D2
1209:  BSF    0A.4
120A:  MOVF   78,W
120B:  MOVWF  22
....................   hr  = bcd2bin(i2c_read(0) & 0x3f); 
*
0592:  CLRF   77
0593:  CALL   18D
0594:  MOVF   78,W
0595:  ANDLW  3F
0596:  MOVWF  3E
0597:  MOVWF  42
0598:  CALL   1D2
0599:  MOVF   78,W
059A:  MOVWF  34
*
0F5A:  CLRF   77
0F5B:  BCF    0A.3
0F5C:  CALL   18D
0F5D:  BSF    0A.3
0F5E:  MOVF   78,W
0F5F:  ANDLW  3F
0F60:  MOVWF  3E
0F61:  MOVWF  42
0F62:  BCF    0A.3
0F63:  CALL   1D2
0F64:  BSF    0A.3
0F65:  MOVF   78,W
0F66:  MOVWF  23
*
120C:  CLRF   77
120D:  BCF    0A.4
120E:  CALL   18D
120F:  BSF    0A.4
1210:  MOVF   78,W
1211:  ANDLW  3F
1212:  MOVWF  3E
1213:  MOVWF  42
1214:  BCF    0A.4
1215:  CALL   1D2
1216:  BSF    0A.4
1217:  MOVF   78,W
1218:  MOVWF  23
....................   i2c_stop(); 
*
059B:  BCF    20.4
059C:  MOVF   20,W
059D:  BSF    03.5
059E:  MOVWF  07
059F:  NOP
05A0:  BCF    03.5
05A1:  BSF    20.3
05A2:  MOVF   20,W
05A3:  BSF    03.5
05A4:  MOVWF  07
05A5:  BCF    03.5
05A6:  BTFSS  07.3
05A7:  GOTO   5A6
05A8:  NOP
05A9:  GOTO   5AA
05AA:  NOP
05AB:  BSF    20.4
05AC:  MOVF   20,W
05AD:  BSF    03.5
05AE:  MOVWF  07
05AF:  NOP
*
0F67:  BCF    20.4
0F68:  MOVF   20,W
0F69:  BSF    03.5
0F6A:  MOVWF  07
0F6B:  NOP
0F6C:  BCF    03.5
0F6D:  BSF    20.3
0F6E:  MOVF   20,W
0F6F:  BSF    03.5
0F70:  MOVWF  07
0F71:  BCF    03.5
0F72:  BTFSS  07.3
0F73:  GOTO   772
0F74:  NOP
0F75:  GOTO   776
0F76:  NOP
0F77:  BSF    20.4
0F78:  MOVF   20,W
0F79:  BSF    03.5
0F7A:  MOVWF  07
0F7B:  NOP
*
1219:  BCF    20.4
121A:  MOVF   20,W
121B:  BSF    03.5
121C:  MOVWF  07
121D:  NOP
121E:  BCF    03.5
121F:  BSF    20.3
1220:  MOVF   20,W
1221:  BSF    03.5
1222:  MOVWF  07
1223:  BCF    03.5
1224:  BTFSS  07.3
1225:  GOTO   224
1226:  NOP
1227:  GOTO   228
1228:  NOP
1229:  BSF    20.4
122A:  MOVF   20,W
122B:  BSF    03.5
122C:  MOVWF  07
122D:  NOP
....................  
.................... }  
....................  
....................  
.................... ///////////////////////////////// Definiciones de Pines ///////////////////////////////// 
.................... #define TRMP1     PIN_A0  // Temperatura one wire (DS18B20) 1 
.................... #define TRMP2     PIN_A1  // Temperatura one wire (DS18B20) 2 
.................... #define TRMP3     PIN_A2  // Temperatura aux 
....................  
.................... #define CALOR1    PIN_B0  // Resistencias 1 (1 unidad) 
.................... #define CALOR1B   PIN_B1  // Resistencias 2 (1 unidad) 
.................... #define CALOR2    PIN_B2  // Resistencias 3 (2 unidades) 
.................... #define CALOR4    PIN_B3  // Resistencias 4 (4 unidades) 
....................  
.................... #define ARRIBA    PIN_C0  // Pulsador 1 (Arriba) 
.................... #define ABAJO     PIN_C1  // Pulsador 2 (Abajo) 
.................... #define PROX      PIN_C2  // Pulsador 3 (Siguiente) 
.................... #define TECLA4    PIN_B4  // Auxiliar 
.................... #define TECLA5    PIN_B5  // Auxiliar 
....................  
.................... #define RELE3     PIN_D0  // Rele de bomba centrifuga 
.................... #define BBA       PIN_D1  // Rele de electrovalvula 
.................... #define VALVE     PIN_D2  // Rele auxiliar 
....................  
.................... #define LLENADO   PIN_A3  // Fin de carrera de llenado por evaporacion AN3 
.................... #define FCARRERA  PIN_A4  // Fin de carrera de corte por falta de nivel critico NoAN 
.................... #define CRITICO   PIN_A5  // Fin de carrera auxiliar AN4 
.................... ///////////////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... /// Definiciones de posiciones de memoria 
.................... #define HSENCENDIDO    20 
.................... #define HSAPAGADO      22 
.................... #define POTMAX         24 
.................... #define TERMOSTAT      26 
....................  
.................... ////// Variables del DS1307 ///// 
.................... int sec; 
.................... int min; 
.................... int hrs; 
.................... ///////////////////////////////// 
....................  
.................... /*  EN EL LCD 
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_C7 
.................... #define LCD_DB6   PIN_C6 
.................... #define LCD_DB7   PIN_C5 
....................  
.................... #define LCD_E     PIN_D5 
.................... #define LCD_RS    PIN_D7 
.................... #define LCD_RW    PIN_D5 
.................... */ 
.................... /////////////////// Funciones /////////////////////// 
.................... void Inicio(); 
.................... void LeaTemp(); 
.................... void SaleCalor(int RR); 
.................... void Teclado(); 
.................... void Pantalla(); 
.................... void Tiempo(); 
.................... void Calefa(); 
.................... void Automa(); 
.................... void Criticos(); 
.................... void ShutDown(); 
.................... void Apagado(); 
.................... void LeaAnalog(); 
.................... ///////////////////////////////////////////////////// 
....................  
.................... /////////////// VARIABLES GLOBALES /////////////// 
.................... short Rebote; 
.................... int Menu; 
.................... float TempIn;        // Temperatura Sensor 1 (entrada fria) 
.................... float TempOut;       // Temperatura Sensor 2 (salida caliente) 
.................... int intTempIn;       // Temperatura Sensor 1 (entrada fria) 
.................... int intTempOut;      // Temperatura Sensor 2 (salida caliente) 
.................... int Termostato;      // Temperatura del termostato 
.................... int HsOn;            // Hs de Encendido de Caldera 
.................... int HsOff;           // Hs de Apagado de Caldera 
.................... int MaxPower;        // Potencia Maxima 
.................... int HsConfig;        // Hora temporal para configuracion 
.................... int MinConfig;       // Minuto temporal para configuracion 
.................... int PotActual;       // Potencia Actual 
.................... int EstadoCritico;   // Almacena el estado de funcionamiento de la caldera 
.................... int ii;              // Contador complejo 
.................... int CritExS1;        // Contador de exceso critico de temperatura en Sensor1 
.................... int CritExS2;        // Contador de exceso critico de temperatura en Sensor2 
.................... int CritErS1;        // Contador de errores criticos en lectura de temperatura en Sensor1 
.................... int CritErS2;        // Contador de errores criticos en lectura de temperatura en Sensor2 
.................... short Llenar;        // Variable de llenado con electro sin error 
.................... short NCritico;      // Variable de corte por nivel critico 
....................  
.................... ////////////////////////////////////////////////// 
....................  
.................... void main(){ 
*
0F9F:  CLRF   04
0FA0:  BCF    03.7
0FA1:  MOVLW  1F
0FA2:  ANDWF  03,F
0FA3:  MOVLW  FF
0FA4:  MOVWF  20
0FA5:  BSF    03.5
0FA6:  BSF    1F.0
0FA7:  BSF    1F.1
0FA8:  BSF    1F.2
0FA9:  BCF    1F.3
0FAA:  MOVLW  07
0FAB:  MOVWF  1C
.................... int Aux; 
.................... Inicio(); 
0FAC:  BSF    0A.4
0FAD:  BCF    0A.3
0FAE:  BCF    03.5
0FAF:  GOTO   000
0FB0:  BCF    0A.4
0FB1:  BSF    0A.3
.................... LeaAnalog(); 
0FB2:  CALL   68B
.................... while (1) { 
.................... /* 
.................... while (1){ 
.................... lcd_putc("\f");  
.................... LeaAnalog(); 
.................... restart_wdt(); // Reiniciamos el perro 
.................... }*/ 
....................  
.................... ++Aux; 
0FB3:  INCF   3D,F
.................... if (Aux == 255) { // Cada mas o menos 5 segundos 
0FB4:  INCFSZ 3D,W
0FB5:  GOTO   7CF
.................... ++ii; 
0FB6:  INCF   38,F
.................... LeaAnalog(); 
0FB7:  CALL   68B
.................... restart_wdt(); // Reiniciamos el perro 
0FB8:  CLRWDT
.................... LeaTemp(); 
0FB9:  CALL   59D
.................... restart_wdt(); // Reiniciamos el perro 
0FBA:  CLRWDT
.................... Automa(); 
0FBB:  GOTO   6D5
.................... if (Llenar == True) output_high(VALVE); 
0FBC:  BTFSS  24.1
0FBD:  GOTO   7C3
0FBE:  BSF    03.5
0FBF:  BCF    08.2
0FC0:  BCF    03.5
0FC1:  BSF    08.2
.................... else output_low(VALVE); 
0FC2:  GOTO   7C7
0FC3:  BSF    03.5
0FC4:  BCF    08.2
0FC5:  BCF    03.5
0FC6:  BCF    08.2
.................... if ((ii % 4) == 0) { // reseteo variables de error 
0FC7:  MOVF   38,W
0FC8:  ANDLW  03
0FC9:  BTFSS  03.2
0FCA:  GOTO   7CF
.................... CritExS1 = 0; 
0FCB:  CLRF   39
.................... CritExS2 = 0; 
0FCC:  CLRF   3A
.................... CritErS1 = 0; 
0FCD:  CLRF   3B
.................... CritErS2 = 0; 
0FCE:  CLRF   3C
.................... } // reset error 
.................... } // Cada 5 segundos 
....................  
.................... restart_wdt(); // Reiniciamos el perro 
0FCF:  CLRWDT
.................... Tiempo(); 
0FD0:  GOTO   6FC
.................... restart_wdt(); // Reiniciamos el perro 
0FD1:  CLRWDT
.................... Teclado(); 
0FD2:  BCF    0A.3
0FD3:  CALL   386
0FD4:  BSF    0A.3
.................... restart_wdt(); // Reiniciamos el perro 
0FD5:  CLRWDT
.................... Pantalla(); 
0FD6:  CALL   25E
.................... restart_wdt(); // Reiniciamos el perro 
0FD7:  CLRWDT
....................  
.................... Criticos(); // dentro de esta se llama a Calefa(); 
0FD8:  BSF    0A.4
0FD9:  BCF    0A.3
0FDA:  GOTO   24E
0FDB:  BCF    0A.4
0FDC:  BSF    0A.3
.................... restart_wdt(); // Reiniciamos el perro 
0FDD:  CLRWDT
.................... } // while 1 
0FDE:  GOTO   7B3
.................... } // main 
....................  
....................  
.................... void Inicio(){ 
.................... setup_wdt(WDT_2304MS); // Perro mas largo 
0FDF:  SLEEP
*
1000:  MOVLW  0F
1001:  MOVWF  77
1002:  CLRF   01
1003:  MOVLW  81
1004:  MOVWF  04
1005:  BCF    03.7
1006:  MOVF   00,W
1007:  ANDLW  F0
1008:  IORLW  07
1009:  MOVWF  00
100A:  CLRWDT
100B:  MOVF   00,W
100C:  ANDLW  F7
100D:  BTFSC  77.3
100E:  ANDLW  F0
100F:  IORWF  77,W
1010:  MOVWF  00
.................... lcd_init(); 
.................... DS1307_init(); 
.................... delay_ms(5); 
*
1121:  MOVLW  05
1122:  BCF    03.5
1123:  MOVWF  51
1124:  BCF    0A.4
1125:  CALL   093
1126:  BSF    0A.4
.................... lcd_putc("\f");  
1127:  MOVLW  0C
1128:  BSF    03.6
1129:  MOVWF  0D
112A:  MOVLW  00
112B:  MOVWF  0F
112C:  BCF    0A.4
112D:  BCF    03.6
112E:  CALL   22E
112F:  BSF    0A.4
....................  
.................... setup_adc_ports(NO_ANALOGS); 
1130:  BSF    03.5
1131:  BSF    1F.0
1132:  BSF    1F.1
1133:  BSF    1F.2
1134:  BCF    1F.3
.................... setup_adc(ADC_OFF);  
1135:  BCF    03.5
1136:  BCF    1F.0
.................... setup_psp(PSP_DISABLED);  
1137:  BSF    03.5
1138:  BCF    09.4
.................... setup_spi(FALSE);  
1139:  BCF    03.5
113A:  CLRF   14
.................... setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);  
113B:  BSF    03.5
113C:  MOVF   01,W
113D:  ANDLW  C7
113E:  IORLW  08
113F:  MOVWF  01
.................... setup_timer_1(T1_DISABLED);  
1140:  BCF    03.5
1141:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1);  
1142:  MOVLW  00
1143:  MOVWF  78
1144:  MOVWF  12
1145:  MOVLW  00
1146:  BSF    03.5
1147:  MOVWF  12
.................... setup_comparator(NC_NC_NC_NC);  
1148:  MOVLW  07
1149:  MOVWF  1C
114A:  MOVF   05,W
114B:  MOVWF  05
114C:  MOVLW  10
114D:  MOVWF  77
114E:  DECFSZ 77,F
114F:  GOTO   14E
1150:  NOP
1151:  MOVF   1C,W
1152:  BCF    03.5
1153:  BCF    0D.6
.................... setup_vref(VREF_LOW|-2);  
1154:  MOVLW  FE
1155:  BSF    03.5
1156:  MOVWF  1D
1157:  BSF    05.2
....................  
.................... HsOn = read_eeprom(HSENCENDIDO); 
1158:  MOVLW  14
1159:  BCF    03.5
115A:  BSF    03.6
115B:  MOVWF  0D
115C:  BSF    03.5
115D:  BCF    0C.7
115E:  BSF    0C.0
115F:  BCF    03.5
1160:  MOVF   0C,W
1161:  BCF    03.6
1162:  MOVWF  31
.................... if (HsOn > 47) HsOn = 36;  
1163:  MOVF   31,W
1164:  SUBLW  2F
1165:  BTFSC  03.0
1166:  GOTO   169
1167:  MOVLW  24
1168:  MOVWF  31
.................... HsOff = read_eeprom(HSAPAGADO); 
1169:  MOVLW  16
116A:  BSF    03.6
116B:  MOVWF  0D
116C:  BSF    03.5
116D:  BCF    0C.7
116E:  BSF    0C.0
116F:  BCF    03.5
1170:  MOVF   0C,W
1171:  BCF    03.6
1172:  MOVWF  32
.................... if (HsOff > 47) HsOff = 12;  
1173:  MOVF   32,W
1174:  SUBLW  2F
1175:  BTFSC  03.0
1176:  GOTO   179
1177:  MOVLW  0C
1178:  MOVWF  32
.................... MaxPower = read_eeprom(POTMAX); 
1179:  MOVLW  18
117A:  BSF    03.6
117B:  MOVWF  0D
117C:  BSF    03.5
117D:  BCF    0C.7
117E:  BSF    0C.0
117F:  BCF    03.5
1180:  MOVF   0C,W
1181:  BCF    03.6
1182:  MOVWF  33
.................... if ((MaxPower > 8) || (MaxPower == 0)) MaxPower = 8;  
1183:  MOVF   33,W
1184:  SUBLW  08
1185:  BTFSS  03.0
1186:  GOTO   18A
1187:  MOVF   33,F
1188:  BTFSS  03.2
1189:  GOTO   18C
118A:  MOVLW  08
118B:  MOVWF  33
.................... Termostato = read_eeprom(TERMOSTAT); 
118C:  MOVLW  1A
118D:  BSF    03.6
118E:  MOVWF  0D
118F:  BSF    03.5
1190:  BCF    0C.7
1191:  BSF    0C.0
1192:  BCF    03.5
1193:  MOVF   0C,W
1194:  BCF    03.6
1195:  MOVWF  30
.................... if ((Termostato > 18) || (Termostato < 3)) Termostato = 13;  
1196:  MOVF   30,W
1197:  SUBLW  12
1198:  BTFSS  03.0
1199:  GOTO   19E
119A:  MOVF   30,W
119B:  SUBLW  02
119C:  BTFSS  03.0
119D:  GOTO   1A0
119E:  MOVLW  0D
119F:  MOVWF  30
....................  
.................... Menu = 1; 
11A0:  MOVLW  01
11A1:  MOVWF  25
.................... ii = 0; 
11A2:  CLRF   38
.................... Llenar = 0; 
11A3:  BCF    24.1
.................... NCritico = 0; 
11A4:  BCF    24.2
.................... CritExS1 = 0; 
11A5:  CLRF   39
.................... CritExS2 = 0; 
11A6:  CLRF   3A
.................... CritErS1 = 0; 
11A7:  CLRF   3B
.................... CritErS2 = 0; 
11A8:  CLRF   3C
.................... EstadoCritico = 0; 
11A9:  CLRF   37
.................... SaleCalor(0); 
11AA:  CLRF   40
11AB:  BCF    0A.4
11AC:  CALL   279
11AD:  BSF    0A.4
.................... ds1307_get_time(hrs,min,sec); 
.................... delay_ms(2); 
*
122E:  MOVLW  02
122F:  BCF    03.5
1230:  MOVWF  51
1231:  BCF    0A.4
1232:  CALL   093
1233:  BSF    0A.4
.................... if ((hrs > 23) || (min > 59) || (sec > 59)) ds1307_set_time(0, 0, 0); 
1234:  MOVF   23,W
1235:  SUBLW  17
1236:  BTFSS  03.0
1237:  GOTO   240
1238:  MOVF   22,W
1239:  SUBLW  3B
123A:  BTFSS  03.0
123B:  GOTO   240
123C:  MOVF   21,W
123D:  SUBLW  3B
123E:  BTFSC  03.0
123F:  GOTO   246
1240:  CLRF   3E
1241:  CLRF   3F
1242:  CLRF   40
1243:  BCF    0A.4
1244:  CALL   339
1245:  BSF    0A.4
.................... LeaTemp(); // Para que lea la temperatura por primera vez y no nos tire error 
1246:  BCF    0A.4
1247:  BSF    0A.3
1248:  CALL   59D
1249:  BSF    0A.4
124A:  BCF    0A.3
.................... } 
124B:  BSF    0A.3
124C:  BCF    0A.4
124D:  GOTO   7B0 (RETURN)
....................  
.................... void LeaAnalog(){ 
.................... restart_wdt(); // Reiniciamos el perro 
*
0E8B:  CLRWDT
.................... int  val; 
.................... int  V1; 
.................... int  V2; 
....................  
.................... setup_adc(ADC_CLOCK_INTERNAL); 
0E8C:  BSF    03.5
0E8D:  BCF    1F.6
0E8E:  BCF    03.5
0E8F:  BSF    1F.6
0E90:  BSF    1F.7
0E91:  BSF    03.5
0E92:  BCF    1F.7
0E93:  BCF    03.5
0E94:  BSF    1F.0
.................... setup_adc_ports(AN0_AN1_AN2_AN3_AN4); 
0E95:  BSF    03.5
0E96:  BCF    1F.0
0E97:  BSF    1F.1
0E98:  BCF    1F.2
0E99:  BCF    1F.3
....................  
.................... set_adc_channel(3); 
0E9A:  MOVLW  18
0E9B:  MOVWF  78
0E9C:  BCF    03.5
0E9D:  MOVF   1F,W
0E9E:  ANDLW  C7
0E9F:  IORWF  78,W
0EA0:  MOVWF  1F
.................... delay_ms(5); 
0EA1:  MOVLW  05
0EA2:  MOVWF  51
0EA3:  BCF    0A.3
0EA4:  CALL   093
0EA5:  BSF    0A.3
.................... val = read_adc(); 
0EA6:  BSF    1F.2
0EA7:  BTFSC  1F.2
0EA8:  GOTO   6A7
0EA9:  MOVF   1E,W
0EAA:  MOVWF  3E
.................... V1 = val; 
0EAB:  MOVF   3E,W
0EAC:  MOVWF  3F
.................... if (val > 170) Llenar = True; 
0EAD:  MOVF   3E,W
0EAE:  SUBLW  AA
0EAF:  BTFSC  03.0
0EB0:  GOTO   6B3
0EB1:  BSF    24.1
.................... else Llenar = False; 
0EB2:  GOTO   6B4
0EB3:  BCF    24.1
....................  
.................... set_adc_channel(4); 
0EB4:  MOVLW  20
0EB5:  MOVWF  78
0EB6:  MOVF   1F,W
0EB7:  ANDLW  C7
0EB8:  IORWF  78,W
0EB9:  MOVWF  1F
.................... delay_ms(5); 
0EBA:  MOVLW  05
0EBB:  MOVWF  51
0EBC:  BCF    0A.3
0EBD:  CALL   093
0EBE:  BSF    0A.3
.................... val = read_adc(); 
0EBF:  BSF    1F.2
0EC0:  BTFSC  1F.2
0EC1:  GOTO   6C0
0EC2:  MOVF   1E,W
0EC3:  MOVWF  3E
.................... V2 = val; 
0EC4:  MOVF   3E,W
0EC5:  MOVWF  40
.................... if (val > 170) NCritico = True; 
0EC6:  MOVF   3E,W
0EC7:  SUBLW  AA
0EC8:  BTFSC  03.0
0EC9:  GOTO   6CC
0ECA:  BSF    24.2
.................... else NCritico = False; 
0ECB:  GOTO   6CD
0ECC:  BCF    24.2
....................  
.................... setup_adc_ports(NO_ANALOGS); 
0ECD:  BSF    03.5
0ECE:  BSF    1F.0
0ECF:  BSF    1F.1
0ED0:  BSF    1F.2
0ED1:  BCF    1F.3
.................... setup_adc(ADC_OFF);  
0ED2:  BCF    03.5
0ED3:  BCF    1F.0
.................... /* 
.................... lcd_gotoxy(1,1); 
.................... printf(lcd_putc,"V1 %03u", V1); 
.................... lcd_gotoxy(1,2); 
.................... printf(lcd_putc,"V2 %03u", V2); 
.................... restart_wdt(); // Reiniciamos el perro 
.................... delay_ms(200); 
.................... restart_wdt(); // Reiniciamos el perro 
.................... */ 
.................... } //Fn 
0ED4:  RETURN
....................  
.................... void LeaTemp(){ 
.................... restart_wdt(); // Reiniciamos el perro 
*
0D9D:  CLRWDT
.................... Teclado(); 
0D9E:  BCF    0A.3
0D9F:  CALL   386
0DA0:  BSF    0A.3
.................... TempIn = ds1820_read1();  
*
0E06:  MOVF   7A,W
0E07:  MOVWF  29
0E08:  MOVF   79,W
0E09:  MOVWF  28
0E0A:  MOVF   78,W
0E0B:  MOVWF  27
0E0C:  MOVF   77,W
0E0D:  MOVWF  26
.................... intTempIn = (int) TempIn; 
0E0E:  MOVF   29,W
0E0F:  MOVWF  41
0E10:  MOVF   28,W
0E11:  MOVWF  40
0E12:  MOVF   27,W
0E13:  MOVWF  3F
0E14:  MOVF   26,W
0E15:  MOVWF  3E
0E16:  BCF    0A.3
0E17:  CALL   77D
0E18:  BSF    0A.3
0E19:  MOVF   78,W
0E1A:  MOVWF  2E
.................... Pantalla(); 
0E1B:  CALL   25E
.................... restart_wdt(); // Reiniciamos el perro 
0E1C:  CLRWDT
.................... Teclado(); 
0E1D:  BCF    0A.3
0E1E:  CALL   386
0E1F:  BSF    0A.3
.................... TempOut = ds1820_read2(); 
*
0E73:  MOVF   7A,W
0E74:  MOVWF  2D
0E75:  MOVF   79,W
0E76:  MOVWF  2C
0E77:  MOVF   78,W
0E78:  MOVWF  2B
0E79:  MOVF   77,W
0E7A:  MOVWF  2A
.................... intTempOut = (int) TempOut; 
0E7B:  MOVF   2D,W
0E7C:  MOVWF  41
0E7D:  MOVF   2C,W
0E7E:  MOVWF  40
0E7F:  MOVF   2B,W
0E80:  MOVWF  3F
0E81:  MOVF   2A,W
0E82:  MOVWF  3E
0E83:  BCF    0A.3
0E84:  CALL   77D
0E85:  BSF    0A.3
0E86:  MOVF   78,W
0E87:  MOVWF  2F
.................... Pantalla(); 
0E88:  CALL   25E
.................... restart_wdt(); // Reiniciamos el perro 
0E89:  CLRWDT
.................... } 
0E8A:  RETURN
....................  
.................... void SaleCalor(int RR){ 
.................... switch(RR) 
.................... { 
*
0279:  MOVF   40,W
027A:  ADDLW  F7
027B:  BTFSC  03.0
027C:  GOTO   328
027D:  ADDLW  09
027E:  GOTO   32C
....................    case 0: 
....................       output_low(CALOR1); 
027F:  BSF    03.5
0280:  BCF    06.0
0281:  BCF    03.5
0282:  BCF    06.0
....................       output_low(CALOR1B); 
0283:  BSF    03.5
0284:  BCF    06.1
0285:  BCF    03.5
0286:  BCF    06.1
....................       output_low(CALOR2); 
0287:  BSF    03.5
0288:  BCF    06.2
0289:  BCF    03.5
028A:  BCF    06.2
....................       output_low(CALOR4); 
028B:  BSF    03.5
028C:  BCF    06.3
028D:  BCF    03.5
028E:  BCF    06.3
....................       break; 
028F:  GOTO   328
....................  
....................    case 1: 
....................       output_high(CALOR1); 
0290:  BSF    03.5
0291:  BCF    06.0
0292:  BCF    03.5
0293:  BSF    06.0
....................       output_low(CALOR1B); 
0294:  BSF    03.5
0295:  BCF    06.1
0296:  BCF    03.5
0297:  BCF    06.1
....................       output_low(CALOR2); 
0298:  BSF    03.5
0299:  BCF    06.2
029A:  BCF    03.5
029B:  BCF    06.2
....................       output_low(CALOR4); 
029C:  BSF    03.5
029D:  BCF    06.3
029E:  BCF    03.5
029F:  BCF    06.3
....................       break; 
02A0:  GOTO   328
....................  
....................    case 2: 
....................       output_low(CALOR1); 
02A1:  BSF    03.5
02A2:  BCF    06.0
02A3:  BCF    03.5
02A4:  BCF    06.0
....................       output_low(CALOR1B); 
02A5:  BSF    03.5
02A6:  BCF    06.1
02A7:  BCF    03.5
02A8:  BCF    06.1
....................       output_high(CALOR2); 
02A9:  BSF    03.5
02AA:  BCF    06.2
02AB:  BCF    03.5
02AC:  BSF    06.2
....................       output_low(CALOR4); 
02AD:  BSF    03.5
02AE:  BCF    06.3
02AF:  BCF    03.5
02B0:  BCF    06.3
....................       break; 
02B1:  GOTO   328
....................  
....................    case 3: 
....................       output_low(CALOR1); 
02B2:  BSF    03.5
02B3:  BCF    06.0
02B4:  BCF    03.5
02B5:  BCF    06.0
....................       output_high(CALOR1B); 
02B6:  BSF    03.5
02B7:  BCF    06.1
02B8:  BCF    03.5
02B9:  BSF    06.1
....................       output_high(CALOR2); 
02BA:  BSF    03.5
02BB:  BCF    06.2
02BC:  BCF    03.5
02BD:  BSF    06.2
....................       output_low(CALOR4); 
02BE:  BSF    03.5
02BF:  BCF    06.3
02C0:  BCF    03.5
02C1:  BCF    06.3
....................       break; 
02C2:  GOTO   328
....................  
....................    case 4: 
....................       output_low(CALOR1); 
02C3:  BSF    03.5
02C4:  BCF    06.0
02C5:  BCF    03.5
02C6:  BCF    06.0
....................       output_low(CALOR1B); 
02C7:  BSF    03.5
02C8:  BCF    06.1
02C9:  BCF    03.5
02CA:  BCF    06.1
....................       output_low(CALOR2); 
02CB:  BSF    03.5
02CC:  BCF    06.2
02CD:  BCF    03.5
02CE:  BCF    06.2
....................       output_high(CALOR4); 
02CF:  BSF    03.5
02D0:  BCF    06.3
02D1:  BCF    03.5
02D2:  BSF    06.3
....................       break; 
02D3:  GOTO   328
....................  
....................    case 5: 
....................       output_low(CALOR1); 
02D4:  BSF    03.5
02D5:  BCF    06.0
02D6:  BCF    03.5
02D7:  BCF    06.0
....................       output_high(CALOR1B); 
02D8:  BSF    03.5
02D9:  BCF    06.1
02DA:  BCF    03.5
02DB:  BSF    06.1
....................       output_low(CALOR2); 
02DC:  BSF    03.5
02DD:  BCF    06.2
02DE:  BCF    03.5
02DF:  BCF    06.2
....................       output_high(CALOR4); 
02E0:  BSF    03.5
02E1:  BCF    06.3
02E2:  BCF    03.5
02E3:  BSF    06.3
....................       break; 
02E4:  GOTO   328
....................  
....................    case 6: 
....................       output_low(CALOR1); 
02E5:  BSF    03.5
02E6:  BCF    06.0
02E7:  BCF    03.5
02E8:  BCF    06.0
....................       output_low(CALOR1B); 
02E9:  BSF    03.5
02EA:  BCF    06.1
02EB:  BCF    03.5
02EC:  BCF    06.1
....................       output_high(CALOR2); 
02ED:  BSF    03.5
02EE:  BCF    06.2
02EF:  BCF    03.5
02F0:  BSF    06.2
....................       output_high(CALOR4); 
02F1:  BSF    03.5
02F2:  BCF    06.3
02F3:  BCF    03.5
02F4:  BSF    06.3
....................       break; 
02F5:  GOTO   328
....................  
....................    case 7: 
....................       output_low(CALOR1); 
02F6:  BSF    03.5
02F7:  BCF    06.0
02F8:  BCF    03.5
02F9:  BCF    06.0
....................       output_high(CALOR1B); 
02FA:  BSF    03.5
02FB:  BCF    06.1
02FC:  BCF    03.5
02FD:  BSF    06.1
....................       output_high(CALOR2); 
02FE:  BSF    03.5
02FF:  BCF    06.2
0300:  BCF    03.5
0301:  BSF    06.2
....................       output_high(CALOR4); 
0302:  BSF    03.5
0303:  BCF    06.3
0304:  BCF    03.5
0305:  BSF    06.3
....................       break; 
0306:  GOTO   328
....................  
....................    case 8: 
....................       output_high(CALOR1); 
0307:  BSF    03.5
0308:  BCF    06.0
0309:  BCF    03.5
030A:  BSF    06.0
....................       output_high(CALOR1B); 
030B:  BSF    03.5
030C:  BCF    06.1
030D:  BCF    03.5
030E:  BSF    06.1
....................       output_high(CALOR2); 
030F:  BSF    03.5
0310:  BCF    06.2
0311:  BCF    03.5
0312:  BSF    06.2
....................       output_high(CALOR4); 
0313:  BSF    03.5
0314:  BCF    06.3
0315:  BCF    03.5
0316:  BSF    06.3
....................       break; 
0317:  GOTO   328
....................  
....................    defalut: 
....................       output_low(CALOR1); 
0318:  BSF    03.5
0319:  BCF    06.0
031A:  BCF    03.5
031B:  BCF    06.0
....................       output_low(CALOR1B); 
031C:  BSF    03.5
031D:  BCF    06.1
031E:  BCF    03.5
031F:  BCF    06.1
....................       output_low(CALOR2); 
0320:  BSF    03.5
0321:  BCF    06.2
0322:  BCF    03.5
0323:  BCF    06.2
....................       output_low(CALOR4); 
0324:  BSF    03.5
0325:  BCF    06.3
0326:  BCF    03.5
0327:  BCF    06.3
....................       break; 
.................... } 
....................  PotActual = RR; 
0328:  MOVF   40,W
0329:  MOVWF  36
....................  restart_wdt(); // Reiniciamos el perro 
032A:  CLRWDT
.................... } 
032B:  RETURN
....................  
.................... void Tiempo(){ 
.................... ds1307_get_time(hrs,min,sec); 
.................... delay_ms(2); 
*
0F7C:  MOVLW  02
0F7D:  BCF    03.5
0F7E:  MOVWF  51
0F7F:  BCF    0A.3
0F80:  CALL   093
0F81:  BSF    0A.3
.................... } 
0F82:  BSF    0A.3
0F83:  BCF    0A.4
0F84:  GOTO   7D1 (RETURN)
....................  
.................... void Teclado(){ 
....................  
.................... restart_wdt(); 
*
0386:  CLRWDT
.................... if (input(ARRIBA)==0 && input(ABAJO)==0 && input(PROX)==0) Rebote = false; // Soltamos las teclas 
0387:  BSF    20.0
0388:  MOVF   20,W
0389:  BSF    03.5
038A:  MOVWF  07
038B:  BCF    03.5
038C:  BTFSC  07.0
038D:  GOTO   39C
038E:  BSF    20.1
038F:  MOVF   20,W
0390:  BSF    03.5
0391:  MOVWF  07
0392:  BCF    03.5
0393:  BTFSC  07.1
0394:  GOTO   39C
0395:  BSF    20.2
0396:  MOVF   20,W
0397:  BSF    03.5
0398:  MOVWF  07
0399:  BCF    03.5
039A:  BTFSS  07.2
039B:  BCF    24.0
.................... restart_wdt(); // Reiniciamos el perro 
039C:  CLRWDT
.................... if (Rebote == false){ // Tomamos el comando ya que el antirebote nos dice que esta ok 
039D:  BTFSC  24.0
039E:  GOTO   608
....................  
....................   if (input(ARRIBA)==1 && input(ABAJO)==1){ // Reseteamos el estado critico 
039F:  BSF    20.0
03A0:  MOVF   20,W
03A1:  BSF    03.5
03A2:  MOVWF  07
03A3:  BCF    03.5
03A4:  BTFSS  07.0
03A5:  GOTO   3AF
03A6:  BSF    20.1
03A7:  MOVF   20,W
03A8:  BSF    03.5
03A9:  MOVWF  07
03AA:  BCF    03.5
03AB:  BTFSS  07.1
03AC:  GOTO   3AF
....................   Rebote = True; 
03AD:  BSF    24.0
....................   EstadoCritico = 0; 
03AE:  CLRF   37
....................   } 
....................  
....................   if (input(PROX)==1){ 
03AF:  BSF    20.2
03B0:  MOVF   20,W
03B1:  BSF    03.5
03B2:  MOVWF  07
03B3:  BCF    03.5
03B4:  BTFSS  07.2
03B5:  GOTO   3BF
....................   Rebote = True; 
03B6:  BSF    24.0
....................   Menu = Menu + 1; 
03B7:  MOVLW  01
03B8:  ADDWF  25,F
....................   if (Menu == 9) Menu = 1;  
03B9:  MOVF   25,W
03BA:  SUBLW  09
03BB:  BTFSS  03.2
03BC:  GOTO   3BF
03BD:  MOVLW  01
03BE:  MOVWF  25
....................   } 
....................  
.................... switch (Menu){ 
03BF:  MOVLW  01
03C0:  SUBWF  25,W
03C1:  ADDLW  F8
03C2:  BTFSC  03.0
03C3:  GOTO   608
03C4:  ADDLW  08
03C5:  GOTO   609
....................    case 3: 
....................       if (input(ARRIBA)==1){ 
03C6:  BSF    20.0
03C7:  MOVF   20,W
03C8:  BSF    03.5
03C9:  MOVWF  07
03CA:  BCF    03.5
03CB:  BTFSS  07.0
03CC:  GOTO   3F2
....................       Rebote = True; 
03CD:  BSF    24.0
....................       Termostato = Termostato + 1; 
03CE:  MOVLW  01
03CF:  ADDWF  30,F
....................       if (Termostato == 18) Termostato = 17; 
03D0:  MOVF   30,W
03D1:  SUBLW  12
03D2:  BTFSS  03.2
03D3:  GOTO   3D6
03D4:  MOVLW  11
03D5:  MOVWF  30
....................       write_eeprom(TERMOSTAT,Termostato); 
03D6:  MOVF   0B,W
03D7:  MOVWF  77
03D8:  BCF    0B.7
03D9:  MOVLW  1A
03DA:  BSF    03.6
03DB:  MOVWF  0D
03DC:  BCF    03.6
03DD:  MOVF   30,W
03DE:  BSF    03.6
03DF:  MOVWF  0C
03E0:  BSF    03.5
03E1:  BCF    0C.7
03E2:  BSF    0C.2
03E3:  MOVLW  55
03E4:  MOVWF  0D
03E5:  MOVLW  AA
03E6:  MOVWF  0D
03E7:  BSF    0C.1
03E8:  BTFSC  0C.1
03E9:  GOTO   3E8
03EA:  BCF    0C.2
03EB:  MOVF   77,W
03EC:  BCF    03.5
03ED:  BCF    03.6
03EE:  IORWF  0B,F
....................       delay_ms(5); 
03EF:  MOVLW  05
03F0:  MOVWF  51
03F1:  CALL   093
....................       } 
....................        
....................       if (input(ABAJO)==1){ 
03F2:  BSF    20.1
03F3:  MOVF   20,W
03F4:  BSF    03.5
03F5:  MOVWF  07
03F6:  BCF    03.5
03F7:  BTFSS  07.1
03F8:  GOTO   41E
....................       Rebote = True; 
03F9:  BSF    24.0
....................       Termostato = Termostato - 1; 
03FA:  MOVLW  01
03FB:  SUBWF  30,F
....................       if (Termostato == 7) Termostato = 8; // El 7 es APAGADO (Termostato x 5 da la temperatura en °C) 
03FC:  MOVF   30,W
03FD:  SUBLW  07
03FE:  BTFSS  03.2
03FF:  GOTO   402
0400:  MOVLW  08
0401:  MOVWF  30
....................       write_eeprom(TERMOSTAT,Termostato); 
0402:  MOVF   0B,W
0403:  MOVWF  77
0404:  BCF    0B.7
0405:  MOVLW  1A
0406:  BSF    03.6
0407:  MOVWF  0D
0408:  BCF    03.6
0409:  MOVF   30,W
040A:  BSF    03.6
040B:  MOVWF  0C
040C:  BSF    03.5
040D:  BCF    0C.7
040E:  BSF    0C.2
040F:  MOVLW  55
0410:  MOVWF  0D
0411:  MOVLW  AA
0412:  MOVWF  0D
0413:  BSF    0C.1
0414:  BTFSC  0C.1
0415:  GOTO   414
0416:  BCF    0C.2
0417:  MOVF   77,W
0418:  BCF    03.5
0419:  BCF    03.6
041A:  IORWF  0B,F
....................       delay_ms(5); 
041B:  MOVLW  05
041C:  MOVWF  51
041D:  CALL   093
....................       } 
....................    break; 
041E:  GOTO   608
....................  
....................    case 4: 
....................       if (input(ARRIBA)==1){ 
041F:  BSF    20.0
0420:  MOVF   20,W
0421:  BSF    03.5
0422:  MOVWF  07
0423:  BCF    03.5
0424:  BTFSS  07.0
0425:  GOTO   449
....................       Rebote = True; 
0426:  BSF    24.0
....................       HsOn = HsOn + 1; 
0427:  MOVLW  01
0428:  ADDWF  31,F
....................       if (HsOn == 49) HsOn = 0; 
0429:  MOVF   31,W
042A:  SUBLW  31
042B:  BTFSC  03.2
042C:  CLRF   31
....................       write_eeprom(HSENCENDIDO,HsOn); 
042D:  MOVF   0B,W
042E:  MOVWF  77
042F:  BCF    0B.7
0430:  MOVLW  14
0431:  BSF    03.6
0432:  MOVWF  0D
0433:  BCF    03.6
0434:  MOVF   31,W
0435:  BSF    03.6
0436:  MOVWF  0C
0437:  BSF    03.5
0438:  BCF    0C.7
0439:  BSF    0C.2
043A:  MOVLW  55
043B:  MOVWF  0D
043C:  MOVLW  AA
043D:  MOVWF  0D
043E:  BSF    0C.1
043F:  BTFSC  0C.1
0440:  GOTO   43F
0441:  BCF    0C.2
0442:  MOVF   77,W
0443:  BCF    03.5
0444:  BCF    03.6
0445:  IORWF  0B,F
....................       delay_ms(5); 
0446:  MOVLW  05
0447:  MOVWF  51
0448:  CALL   093
....................       } 
....................        
....................       if (input(ABAJO)==1){ 
0449:  BSF    20.1
044A:  MOVF   20,W
044B:  BSF    03.5
044C:  MOVWF  07
044D:  BCF    03.5
044E:  BTFSS  07.1
044F:  GOTO   473
....................       Rebote = True; 
0450:  BSF    24.0
....................       HsOn = HsOn - 1; 
0451:  MOVLW  01
0452:  SUBWF  31,F
....................       if (HsOn == 255) HsOn = 48; 
0453:  INCFSZ 31,W
0454:  GOTO   457
0455:  MOVLW  30
0456:  MOVWF  31
....................       write_eeprom(HSENCENDIDO,HsOn); 
0457:  MOVF   0B,W
0458:  MOVWF  77
0459:  BCF    0B.7
045A:  MOVLW  14
045B:  BSF    03.6
045C:  MOVWF  0D
045D:  BCF    03.6
045E:  MOVF   31,W
045F:  BSF    03.6
0460:  MOVWF  0C
0461:  BSF    03.5
0462:  BCF    0C.7
0463:  BSF    0C.2
0464:  MOVLW  55
0465:  MOVWF  0D
0466:  MOVLW  AA
0467:  MOVWF  0D
0468:  BSF    0C.1
0469:  BTFSC  0C.1
046A:  GOTO   469
046B:  BCF    0C.2
046C:  MOVF   77,W
046D:  BCF    03.5
046E:  BCF    03.6
046F:  IORWF  0B,F
....................       delay_ms(5); 
0470:  MOVLW  05
0471:  MOVWF  51
0472:  CALL   093
....................       } 
....................    break; 
0473:  GOTO   608
....................  
....................    case 5: 
....................       if (input(ARRIBA)==1){ 
0474:  BSF    20.0
0475:  MOVF   20,W
0476:  BSF    03.5
0477:  MOVWF  07
0478:  BCF    03.5
0479:  BTFSS  07.0
047A:  GOTO   49E
....................       Rebote = True; 
047B:  BSF    24.0
....................       HsOff = HsOff + 1; 
047C:  MOVLW  01
047D:  ADDWF  32,F
....................       if (HsOff == 49) HsOff = 0; 
047E:  MOVF   32,W
047F:  SUBLW  31
0480:  BTFSC  03.2
0481:  CLRF   32
....................       write_eeprom(HSAPAGADO,HsOff); 
0482:  MOVF   0B,W
0483:  MOVWF  77
0484:  BCF    0B.7
0485:  MOVLW  16
0486:  BSF    03.6
0487:  MOVWF  0D
0488:  BCF    03.6
0489:  MOVF   32,W
048A:  BSF    03.6
048B:  MOVWF  0C
048C:  BSF    03.5
048D:  BCF    0C.7
048E:  BSF    0C.2
048F:  MOVLW  55
0490:  MOVWF  0D
0491:  MOVLW  AA
0492:  MOVWF  0D
0493:  BSF    0C.1
0494:  BTFSC  0C.1
0495:  GOTO   494
0496:  BCF    0C.2
0497:  MOVF   77,W
0498:  BCF    03.5
0499:  BCF    03.6
049A:  IORWF  0B,F
....................       delay_ms(5); 
049B:  MOVLW  05
049C:  MOVWF  51
049D:  CALL   093
....................       } 
....................        
....................       if (input(ABAJO)==1){ 
049E:  BSF    20.1
049F:  MOVF   20,W
04A0:  BSF    03.5
04A1:  MOVWF  07
04A2:  BCF    03.5
04A3:  BTFSS  07.1
04A4:  GOTO   4C8
....................       Rebote = True; 
04A5:  BSF    24.0
....................       HsOff = HsOff - 1; 
04A6:  MOVLW  01
04A7:  SUBWF  32,F
....................       if (HsOff == 255) HsOff = 48; 
04A8:  INCFSZ 32,W
04A9:  GOTO   4AC
04AA:  MOVLW  30
04AB:  MOVWF  32
....................       write_eeprom(HSAPAGADO,HsOff); 
04AC:  MOVF   0B,W
04AD:  MOVWF  77
04AE:  BCF    0B.7
04AF:  MOVLW  16
04B0:  BSF    03.6
04B1:  MOVWF  0D
04B2:  BCF    03.6
04B3:  MOVF   32,W
04B4:  BSF    03.6
04B5:  MOVWF  0C
04B6:  BSF    03.5
04B7:  BCF    0C.7
04B8:  BSF    0C.2
04B9:  MOVLW  55
04BA:  MOVWF  0D
04BB:  MOVLW  AA
04BC:  MOVWF  0D
04BD:  BSF    0C.1
04BE:  BTFSC  0C.1
04BF:  GOTO   4BE
04C0:  BCF    0C.2
04C1:  MOVF   77,W
04C2:  BCF    03.5
04C3:  BCF    03.6
04C4:  IORWF  0B,F
....................       delay_ms(5); 
04C5:  MOVLW  05
04C6:  MOVWF  51
04C7:  CALL   093
....................       } 
....................    break; 
04C8:  GOTO   608
....................  
....................    case 2: 
....................       if (input(ARRIBA)==1){ 
04C9:  BSF    20.0
04CA:  MOVF   20,W
04CB:  BSF    03.5
04CC:  MOVWF  07
04CD:  BCF    03.5
04CE:  BTFSS  07.0
04CF:  GOTO   4F5
....................       Rebote = True; 
04D0:  BSF    24.0
....................       MaxPower = MaxPower + 1; 
04D1:  MOVLW  01
04D2:  ADDWF  33,F
....................       if (MaxPower == 9) MaxPower = 8; 
04D3:  MOVF   33,W
04D4:  SUBLW  09
04D5:  BTFSS  03.2
04D6:  GOTO   4D9
04D7:  MOVLW  08
04D8:  MOVWF  33
....................       write_eeprom(POTMAX,MaxPower); 
04D9:  MOVF   0B,W
04DA:  MOVWF  77
04DB:  BCF    0B.7
04DC:  MOVLW  18
04DD:  BSF    03.6
04DE:  MOVWF  0D
04DF:  BCF    03.6
04E0:  MOVF   33,W
04E1:  BSF    03.6
04E2:  MOVWF  0C
04E3:  BSF    03.5
04E4:  BCF    0C.7
04E5:  BSF    0C.2
04E6:  MOVLW  55
04E7:  MOVWF  0D
04E8:  MOVLW  AA
04E9:  MOVWF  0D
04EA:  BSF    0C.1
04EB:  BTFSC  0C.1
04EC:  GOTO   4EB
04ED:  BCF    0C.2
04EE:  MOVF   77,W
04EF:  BCF    03.5
04F0:  BCF    03.6
04F1:  IORWF  0B,F
....................       delay_ms(5); 
04F2:  MOVLW  05
04F3:  MOVWF  51
04F4:  CALL   093
....................       } 
....................        
....................       if (input(ABAJO)==1){ 
04F5:  BSF    20.1
04F6:  MOVF   20,W
04F7:  BSF    03.5
04F8:  MOVWF  07
04F9:  BCF    03.5
04FA:  BTFSS  07.1
04FB:  GOTO   520
....................       Rebote = True; 
04FC:  BSF    24.0
....................       MaxPower = MaxPower - 1; 
04FD:  MOVLW  01
04FE:  SUBWF  33,F
....................       if (MaxPower == 0) MaxPower = 1; 
04FF:  MOVF   33,F
0500:  BTFSS  03.2
0501:  GOTO   504
0502:  MOVLW  01
0503:  MOVWF  33
....................       write_eeprom(POTMAX,MaxPower); 
0504:  MOVF   0B,W
0505:  MOVWF  77
0506:  BCF    0B.7
0507:  MOVLW  18
0508:  BSF    03.6
0509:  MOVWF  0D
050A:  BCF    03.6
050B:  MOVF   33,W
050C:  BSF    03.6
050D:  MOVWF  0C
050E:  BSF    03.5
050F:  BCF    0C.7
0510:  BSF    0C.2
0511:  MOVLW  55
0512:  MOVWF  0D
0513:  MOVLW  AA
0514:  MOVWF  0D
0515:  BSF    0C.1
0516:  BTFSC  0C.1
0517:  GOTO   516
0518:  BCF    0C.2
0519:  MOVF   77,W
051A:  BCF    03.5
051B:  BCF    03.6
051C:  IORWF  0B,F
....................       delay_ms(5); 
051D:  MOVLW  05
051E:  MOVWF  51
051F:  CALL   093
....................       } 
....................    break; 
0520:  GOTO   608
....................  
....................    case 1: 
....................       if (input(ARRIBA)==1) output_high(BBA); 
0521:  BSF    20.0
0522:  MOVF   20,W
0523:  BSF    03.5
0524:  MOVWF  07
0525:  BCF    03.5
0526:  BTFSS  07.0
0527:  GOTO   52D
0528:  BSF    03.5
0529:  BCF    08.1
052A:  BCF    03.5
052B:  BSF    08.1
....................       else output_low(BBA); 
052C:  GOTO   531
052D:  BSF    03.5
052E:  BCF    08.1
052F:  BCF    03.5
0530:  BCF    08.1
....................        
....................       if (input(ABAJO)==1) output_high(VALVE); 
0531:  BSF    20.1
0532:  MOVF   20,W
0533:  BSF    03.5
0534:  MOVWF  07
0535:  BCF    03.5
0536:  BTFSS  07.1
0537:  GOTO   53D
0538:  BSF    03.5
0539:  BCF    08.2
053A:  BCF    03.5
053B:  BSF    08.2
....................       else output_low(VALVE); 
053C:  GOTO   541
053D:  BSF    03.5
053E:  BCF    08.2
053F:  BCF    03.5
0540:  BCF    08.2
....................    break; 
0541:  GOTO   608
....................  
....................   case 6: 
....................       ds1307_get_time(HsConfig,MinConfig,sec); 
....................       delay_ms(2); 
*
05B0:  MOVLW  02
05B1:  BCF    03.5
05B2:  MOVWF  51
05B3:  CALL   093
....................       Menu = 7; 
05B4:  MOVLW  07
05B5:  MOVWF  25
....................   break; 
05B6:  GOTO   608
....................  
....................   case 7: 
....................       if (input(ARRIBA)==1){ 
05B7:  BSF    20.0
05B8:  MOVF   20,W
05B9:  BSF    03.5
05BA:  MOVWF  07
05BB:  BCF    03.5
05BC:  BTFSS  07.0
05BD:  GOTO   5CB
....................       Rebote = True; 
05BE:  BSF    24.0
....................       HsConfig = HsConfig + 1; 
05BF:  MOVLW  01
05C0:  ADDWF  34,F
....................       if (HsConfig > 23) HsConfig = 0; 
05C1:  MOVF   34,W
05C2:  SUBLW  17
05C3:  BTFSS  03.0
05C4:  CLRF   34
....................       ds1307_set_time(HsConfig, MinConfig, 0); 
05C5:  MOVF   34,W
05C6:  MOVWF  3E
05C7:  MOVF   35,W
05C8:  MOVWF  3F
05C9:  CLRF   40
05CA:  CALL   339
....................       } 
....................        
....................       if (input(ABAJO)==1){ 
05CB:  BSF    20.1
05CC:  MOVF   20,W
05CD:  BSF    03.5
05CE:  MOVWF  07
05CF:  BCF    03.5
05D0:  BTFSS  07.1
05D1:  GOTO   5DF
....................       Rebote = True; 
05D2:  BSF    24.0
....................       HsConfig = HsConfig - 1; 
05D3:  MOVLW  01
05D4:  SUBWF  34,F
....................       if (HsConfig == 255) HsConfig = 23; 
05D5:  INCFSZ 34,W
05D6:  GOTO   5D9
05D7:  MOVLW  17
05D8:  MOVWF  34
....................       ds1307_set_time(HsConfig, MinConfig, 0); 
05D9:  MOVF   34,W
05DA:  MOVWF  3E
05DB:  MOVF   35,W
05DC:  MOVWF  3F
05DD:  CLRF   40
05DE:  CALL   339
....................       } 
....................    break; 
05DF:  GOTO   608
....................     
....................   case 8: 
....................       if (input(ARRIBA)==1){ 
05E0:  BSF    20.0
05E1:  MOVF   20,W
05E2:  BSF    03.5
05E3:  MOVWF  07
05E4:  BCF    03.5
05E5:  BTFSS  07.0
05E6:  GOTO   5F4
....................       Rebote = True; 
05E7:  BSF    24.0
....................       MinConfig = MinConfig + 1; 
05E8:  MOVLW  01
05E9:  ADDWF  35,F
....................       if (MinConfig > 59) MinConfig = 0; 
05EA:  MOVF   35,W
05EB:  SUBLW  3B
05EC:  BTFSS  03.0
05ED:  CLRF   35
....................       ds1307_set_time(HsConfig, MinConfig, 0); 
05EE:  MOVF   34,W
05EF:  MOVWF  3E
05F0:  MOVF   35,W
05F1:  MOVWF  3F
05F2:  CLRF   40
05F3:  CALL   339
....................       } 
....................        
....................       if (input(ABAJO)==1){ 
05F4:  BSF    20.1
05F5:  MOVF   20,W
05F6:  BSF    03.5
05F7:  MOVWF  07
05F8:  BCF    03.5
05F9:  BTFSS  07.1
05FA:  GOTO   608
....................       Rebote = True; 
05FB:  BSF    24.0
....................       MinConfig = MinConfig - 1; 
05FC:  MOVLW  01
05FD:  SUBWF  35,F
....................       if (MinConfig == 255) MinConfig = 59; 
05FE:  INCFSZ 35,W
05FF:  GOTO   602
0600:  MOVLW  3B
0601:  MOVWF  35
....................       ds1307_set_time(HsConfig, MinConfig, 0); 
0602:  MOVF   34,W
0603:  MOVWF  3E
0604:  MOVF   35,W
0605:  MOVWF  3F
0606:  CLRF   40
0607:  CALL   339
....................       } 
....................    break; 
.................... } 
....................  
.................... }//rebote falso 
.................... } //fn 
0608:  RETURN
....................  
....................  
.................... void Pantalla(){ 
....................    lcd_gotoxy(16,1); 
*
0A5E:  MOVLW  10
0A5F:  MOVWF  51
0A60:  MOVLW  01
0A61:  MOVWF  52
0A62:  BCF    0A.3
0A63:  CALL   1F8
0A64:  BSF    0A.3
....................    if (Llenar) printf(lcd_putc,"#"); 
0A65:  BTFSS  24.1
0A66:  GOTO   26D
0A67:  MOVLW  23
0A68:  MOVWF  50
0A69:  BCF    0A.3
0A6A:  CALL   20A
0A6B:  BSF    0A.3
....................    else printf(lcd_putc," "); 
0A6C:  GOTO   272
0A6D:  MOVLW  20
0A6E:  MOVWF  50
0A6F:  BCF    0A.3
0A70:  CALL   20A
0A71:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0A72:  MOVLW  01
0A73:  MOVWF  51
0A74:  MOVWF  52
0A75:  BCF    0A.3
0A76:  CALL   1F8
0A77:  BSF    0A.3
....................    if (EstadoCritico == 0) { 
0A78:  MOVF   37,F
0A79:  BTFSS  03.2
0A7A:  GOTO   2F2
....................          if (bit_test(ii,0)) printf(lcd_putc,"TO:%4.1f%cC %02d:%02d", TempOut,223,hrs,min); 
0A7B:  BTFSS  38.0
0A7C:  GOTO   2B8
0A7D:  MOVLW  54
0A7E:  MOVWF  50
0A7F:  BCF    0A.3
0A80:  CALL   20A
0A81:  BSF    0A.3
0A82:  MOVLW  4F
0A83:  MOVWF  50
0A84:  BCF    0A.3
0A85:  CALL   20A
0A86:  BSF    0A.3
0A87:  MOVLW  3A
0A88:  MOVWF  50
0A89:  BCF    0A.3
0A8A:  CALL   20A
0A8B:  BSF    0A.3
0A8C:  MOVLW  03
0A8D:  MOVWF  04
0A8E:  MOVF   2D,W
0A8F:  MOVWF  46
0A90:  MOVF   2C,W
0A91:  MOVWF  45
0A92:  MOVF   2B,W
0A93:  MOVWF  44
0A94:  MOVF   2A,W
0A95:  MOVWF  43
0A96:  MOVLW  01
0A97:  MOVWF  47
0A98:  CALL   075
0A99:  MOVLW  DF
0A9A:  MOVWF  50
0A9B:  BCF    0A.3
0A9C:  CALL   20A
0A9D:  BSF    0A.3
0A9E:  MOVLW  43
0A9F:  MOVWF  50
0AA0:  BCF    0A.3
0AA1:  CALL   20A
0AA2:  BSF    0A.3
0AA3:  MOVLW  20
0AA4:  MOVWF  50
0AA5:  BCF    0A.3
0AA6:  CALL   20A
0AA7:  BSF    0A.3
0AA8:  MOVF   23,W
0AA9:  MOVWF  40
0AAA:  MOVLW  01
0AAB:  MOVWF  41
0AAC:  CALL   161
0AAD:  MOVLW  3A
0AAE:  MOVWF  50
0AAF:  BCF    0A.3
0AB0:  CALL   20A
0AB1:  BSF    0A.3
0AB2:  MOVF   22,W
0AB3:  MOVWF  40
0AB4:  MOVLW  01
0AB5:  MOVWF  41
0AB6:  CALL   161
....................          else printf(lcd_putc,"TI:%4.1f%cC %02d:%02d", TempIn,223,hrs,min); 
0AB7:  GOTO   2F2
0AB8:  MOVLW  54
0AB9:  MOVWF  50
0ABA:  BCF    0A.3
0ABB:  CALL   20A
0ABC:  BSF    0A.3
0ABD:  MOVLW  49
0ABE:  MOVWF  50
0ABF:  BCF    0A.3
0AC0:  CALL   20A
0AC1:  BSF    0A.3
0AC2:  MOVLW  3A
0AC3:  MOVWF  50
0AC4:  BCF    0A.3
0AC5:  CALL   20A
0AC6:  BSF    0A.3
0AC7:  MOVLW  03
0AC8:  MOVWF  04
0AC9:  MOVF   29,W
0ACA:  MOVWF  46
0ACB:  MOVF   28,W
0ACC:  MOVWF  45
0ACD:  MOVF   27,W
0ACE:  MOVWF  44
0ACF:  MOVF   26,W
0AD0:  MOVWF  43
0AD1:  MOVLW  01
0AD2:  MOVWF  47
0AD3:  CALL   075
0AD4:  MOVLW  DF
0AD5:  MOVWF  50
0AD6:  BCF    0A.3
0AD7:  CALL   20A
0AD8:  BSF    0A.3
0AD9:  MOVLW  43
0ADA:  MOVWF  50
0ADB:  BCF    0A.3
0ADC:  CALL   20A
0ADD:  BSF    0A.3
0ADE:  MOVLW  20
0ADF:  MOVWF  50
0AE0:  BCF    0A.3
0AE1:  CALL   20A
0AE2:  BSF    0A.3
0AE3:  MOVF   23,W
0AE4:  MOVWF  40
0AE5:  MOVLW  01
0AE6:  MOVWF  41
0AE7:  CALL   161
0AE8:  MOVLW  3A
0AE9:  MOVWF  50
0AEA:  BCF    0A.3
0AEB:  CALL   20A
0AEC:  BSF    0A.3
0AED:  MOVF   22,W
0AEE:  MOVWF  40
0AEF:  MOVLW  01
0AF0:  MOVWF  41
0AF1:  CALL   161
....................    } 
....................    if (EstadoCritico == 1) printf(lcd_putc,"EXCESO DE TEMPER");  
0AF2:  DECFSZ 37,W
0AF3:  GOTO   2FD
0AF4:  MOVLW  0D
0AF5:  BSF    03.6
0AF6:  MOVWF  0D
0AF7:  MOVLW  00
0AF8:  MOVWF  0F
0AF9:  BCF    0A.3
0AFA:  BCF    03.6
0AFB:  CALL   22E
0AFC:  BSF    0A.3
....................    if (EstadoCritico == 2) printf(lcd_putc,"BAJO NIVEL AGUA ");  
0AFD:  MOVF   37,W
0AFE:  SUBLW  02
0AFF:  BTFSS  03.2
0B00:  GOTO   30A
0B01:  MOVLW  16
0B02:  BSF    03.6
0B03:  MOVWF  0D
0B04:  MOVLW  00
0B05:  MOVWF  0F
0B06:  BCF    0A.3
0B07:  BCF    03.6
0B08:  CALL   22E
0B09:  BSF    0A.3
....................    if (EstadoCritico == 3) printf(lcd_putc,"FALLA DE SENSOR "); 
0B0A:  MOVF   37,W
0B0B:  SUBLW  03
0B0C:  BTFSS  03.2
0B0D:  GOTO   317
0B0E:  MOVLW  1F
0B0F:  BSF    03.6
0B10:  MOVWF  0D
0B11:  MOVLW  00
0B12:  MOVWF  0F
0B13:  BCF    0A.3
0B14:  BCF    03.6
0B15:  CALL   22E
0B16:  BSF    0A.3
....................    restart_wdt(); // Reiniciamos el perro 
0B17:  CLRWDT
....................  
.................... switch (Menu){ 
0B18:  MOVLW  01
0B19:  SUBWF  25,W
0B1A:  ADDLW  F8
0B1B:  BTFSC  03.0
0B1C:  GOTO   522
0B1D:  ADDLW  08
0B1E:  GOTO   523
....................    case 3: 
....................    lcd_gotoxy(1,2); 
0B1F:  MOVLW  01
0B20:  MOVWF  51
0B21:  MOVLW  02
0B22:  MOVWF  52
0B23:  BCF    0A.3
0B24:  CALL   1F8
0B25:  BSF    0A.3
....................    if (Termostato == 7) printf(lcd_putc,"Ter: OFF P:%2.1fkW",(float) (PotActual * 1.2));  
0B26:  MOVF   30,W
0B27:  SUBLW  07
0B28:  BTFSS  03.2
0B29:  GOTO   369
0B2A:  CLRF   40
0B2B:  MOVF   36,W
0B2C:  MOVWF  3F
0B2D:  CALL   1C4
0B2E:  MOVF   7A,W
0B2F:  MOVWF  53
0B30:  MOVF   79,W
0B31:  MOVWF  52
0B32:  MOVF   78,W
0B33:  MOVWF  51
0B34:  MOVF   77,W
0B35:  MOVWF  50
0B36:  MOVLW  9A
0B37:  MOVWF  57
0B38:  MOVLW  99
0B39:  MOVWF  56
0B3A:  MOVLW  19
0B3B:  MOVWF  55
0B3C:  MOVLW  7F
0B3D:  MOVWF  54
0B3E:  CALL   000
0B3F:  MOVF   77,W
0B40:  MOVWF  3E
0B41:  MOVF   78,W
0B42:  MOVWF  3F
0B43:  MOVF   79,W
0B44:  MOVWF  40
0B45:  MOVF   7A,W
0B46:  MOVWF  41
0B47:  MOVLW  28
0B48:  BSF    03.6
0B49:  MOVWF  0D
0B4A:  MOVLW  00
0B4B:  MOVWF  0F
0B4C:  BCF    03.0
0B4D:  MOVLW  0B
0B4E:  BCF    03.6
0B4F:  MOVWF  43
0B50:  CALL   1E1
0B51:  MOVLW  01
0B52:  MOVWF  04
0B53:  MOVF   41,W
0B54:  MOVWF  46
0B55:  MOVF   40,W
0B56:  MOVWF  45
0B57:  MOVF   3F,W
0B58:  MOVWF  44
0B59:  MOVF   3E,W
0B5A:  MOVWF  43
0B5B:  MOVLW  01
0B5C:  MOVWF  47
0B5D:  CALL   075
0B5E:  MOVLW  6B
0B5F:  MOVWF  50
0B60:  BCF    0A.3
0B61:  CALL   20A
0B62:  BSF    0A.3
0B63:  MOVLW  57
0B64:  MOVWF  50
0B65:  BCF    0A.3
0B66:  CALL   20A
0B67:  BSF    0A.3
....................    else printf(lcd_putc,"Ter:%2d%cC P:%2.1fkW", Termostato*5,223,(float) (PotActual * 1.2));  
0B68:  GOTO   423
0B69:  MOVF   30,W
0B6A:  MOVWF  41
0B6B:  MOVLW  05
0B6C:  MOVWF  42
0B6D:  CALL   239
0B6E:  MOVF   78,W
0B6F:  MOVWF  3E
0B70:  CLRF   40
0B71:  MOVF   36,W
0B72:  MOVWF  3F
0B73:  CALL   1C4
0B74:  MOVF   7A,W
0B75:  MOVWF  53
0B76:  MOVF   79,W
0B77:  MOVWF  52
0B78:  MOVF   78,W
0B79:  MOVWF  51
0B7A:  MOVF   77,W
0B7B:  MOVWF  50
0B7C:  MOVLW  9A
0B7D:  MOVWF  57
0B7E:  MOVLW  99
0B7F:  MOVWF  56
0B80:  MOVLW  19
0B81:  MOVWF  55
0B82:  MOVLW  7F
0B83:  MOVWF  54
0B84:  CALL   000
0B85:  MOVF   77,W
0B86:  MOVWF  3F
0B87:  MOVF   78,W
0B88:  MOVWF  40
0B89:  MOVF   79,W
0B8A:  MOVWF  41
0B8B:  MOVF   7A,W
0B8C:  MOVWF  42
0B8D:  MOVLW  32
0B8E:  BSF    03.6
0B8F:  MOVWF  0D
0B90:  MOVLW  00
0B91:  MOVWF  0F
0B92:  BCF    03.0
0B93:  MOVLW  04
0B94:  BCF    03.6
0B95:  MOVWF  43
0B96:  CALL   1E1
0B97:  MOVF   3E,W
0B98:  MOVWF  43
0B99:  MOVLW  11
0B9A:  MOVWF  44
*
0BFD:  MOVLW  DF
0BFE:  MOVWF  50
0BFF:  BCF    0A.3
0C00:  CALL   20A
0C01:  BSF    0A.3
0C02:  MOVLW  36
0C03:  BSF    03.6
0C04:  MOVWF  0D
0C05:  MOVLW  00
0C06:  MOVWF  0F
0C07:  BSF    03.0
0C08:  MOVLW  04
0C09:  BCF    03.6
0C0A:  MOVWF  43
0C0B:  CALL   1E1
0C0C:  MOVLW  01
0C0D:  MOVWF  04
0C0E:  MOVF   42,W
0C0F:  MOVWF  46
0C10:  MOVF   41,W
0C11:  MOVWF  45
0C12:  MOVF   40,W
0C13:  MOVWF  44
0C14:  MOVF   3F,W
0C15:  MOVWF  43
0C16:  MOVLW  01
0C17:  MOVWF  47
0C18:  CALL   075
0C19:  MOVLW  6B
0C1A:  MOVWF  50
0C1B:  BCF    0A.3
0C1C:  CALL   20A
0C1D:  BSF    0A.3
0C1E:  MOVLW  57
0C1F:  MOVWF  50
0C20:  BCF    0A.3
0C21:  CALL   20A
0C22:  BSF    0A.3
....................    break; 
0C23:  GOTO   522
....................  
....................    case 4: 
....................    lcd_gotoxy(1,2);  
0C24:  MOVLW  01
0C25:  MOVWF  51
0C26:  MOVLW  02
0C27:  MOVWF  52
0C28:  BCF    0A.3
0C29:  CALL   1F8
0C2A:  BSF    0A.3
....................    if (HsOn == 48 ) printf(lcd_putc,"Hs Encend: OFF  "); 
0C2B:  MOVF   31,W
0C2C:  SUBLW  30
0C2D:  BTFSS  03.2
0C2E:  GOTO   439
0C2F:  MOVLW  3D
0C30:  BSF    03.6
0C31:  MOVWF  0D
0C32:  MOVLW  00
0C33:  MOVWF  0F
0C34:  BCF    0A.3
0C35:  BCF    03.6
0C36:  CALL   22E
0C37:  BSF    0A.3
....................    else printf(lcd_putc,"Hs Encend: %02d:%02d", HsOn/2,(HsOn%2)*30);  
0C38:  GOTO   45E
0C39:  BCF    03.0
0C3A:  RRF    31,W
0C3B:  MOVWF  3E
0C3C:  MOVF   31,W
0C3D:  ANDLW  01
0C3E:  MOVWF  40
0C3F:  MOVWF  41
0C40:  MOVLW  1E
0C41:  MOVWF  42
0C42:  CALL   239
0C43:  MOVF   78,W
0C44:  MOVWF  3F
0C45:  MOVLW  46
0C46:  BSF    03.6
0C47:  MOVWF  0D
0C48:  MOVLW  00
0C49:  MOVWF  0F
0C4A:  BCF    03.0
0C4B:  MOVLW  0B
0C4C:  BCF    03.6
0C4D:  MOVWF  43
0C4E:  CALL   1E1
0C4F:  MOVF   3E,W
0C50:  MOVWF  40
0C51:  MOVLW  01
0C52:  MOVWF  41
0C53:  CALL   161
0C54:  MOVLW  3A
0C55:  MOVWF  50
0C56:  BCF    0A.3
0C57:  CALL   20A
0C58:  BSF    0A.3
0C59:  MOVF   3F,W
0C5A:  MOVWF  40
0C5B:  MOVLW  01
0C5C:  MOVWF  41
0C5D:  CALL   161
....................    break; 
0C5E:  GOTO   522
....................  
....................    case 5: 
....................    lcd_gotoxy(1,2);  
0C5F:  MOVLW  01
0C60:  MOVWF  51
0C61:  MOVLW  02
0C62:  MOVWF  52
0C63:  BCF    0A.3
0C64:  CALL   1F8
0C65:  BSF    0A.3
....................    if (HsOff == 48 ) printf(lcd_putc,"Hs Apagad: OFF  ");  
0C66:  MOVF   32,W
0C67:  SUBLW  30
0C68:  BTFSS  03.2
0C69:  GOTO   473
0C6A:  MOVLW  51
0C6B:  BSF    03.6
0C6C:  MOVWF  0D
0C6D:  MOVLW  00
0C6E:  MOVWF  0F
0C6F:  BCF    0A.3
0C70:  BCF    03.6
0C71:  CALL   22E
0C72:  BSF    0A.3
....................    printf(lcd_putc,"Hs Apagad: %02d:%02d", HsOff/2,(HsOff%2)*30); 
0C73:  BCF    03.0
0C74:  RRF    32,W
0C75:  MOVWF  3E
0C76:  MOVF   32,W
0C77:  ANDLW  01
0C78:  MOVWF  40
0C79:  MOVWF  41
0C7A:  MOVLW  1E
0C7B:  MOVWF  42
0C7C:  CALL   239
0C7D:  MOVF   78,W
0C7E:  MOVWF  3F
0C7F:  MOVLW  5A
0C80:  BSF    03.6
0C81:  MOVWF  0D
0C82:  MOVLW  00
0C83:  MOVWF  0F
0C84:  BCF    03.0
0C85:  MOVLW  0B
0C86:  BCF    03.6
0C87:  MOVWF  43
0C88:  CALL   1E1
0C89:  MOVF   3E,W
0C8A:  MOVWF  40
0C8B:  MOVLW  01
0C8C:  MOVWF  41
0C8D:  CALL   161
0C8E:  MOVLW  3A
0C8F:  MOVWF  50
0C90:  BCF    0A.3
0C91:  CALL   20A
0C92:  BSF    0A.3
0C93:  MOVF   3F,W
0C94:  MOVWF  40
0C95:  MOVLW  01
0C96:  MOVWF  41
0C97:  CALL   161
....................    break; 
0C98:  GOTO   522
....................  
....................    case 2: 
....................    lcd_gotoxy(1,2);  
0C99:  MOVLW  01
0C9A:  MOVWF  51
0C9B:  MOVLW  02
0C9C:  MOVWF  52
0C9D:  BCF    0A.3
0C9E:  CALL   1F8
0C9F:  BSF    0A.3
....................    printf(lcd_putc,"Limite Pot:%2.1fkW", (float)(MaxPower * 1.2));  
0CA0:  CLRF   40
0CA1:  MOVF   33,W
0CA2:  MOVWF  3F
0CA3:  CALL   1C4
0CA4:  MOVF   7A,W
0CA5:  MOVWF  53
0CA6:  MOVF   79,W
0CA7:  MOVWF  52
0CA8:  MOVF   78,W
0CA9:  MOVWF  51
0CAA:  MOVF   77,W
0CAB:  MOVWF  50
0CAC:  MOVLW  9A
0CAD:  MOVWF  57
0CAE:  MOVLW  99
0CAF:  MOVWF  56
0CB0:  MOVLW  19
0CB1:  MOVWF  55
0CB2:  MOVLW  7F
0CB3:  MOVWF  54
0CB4:  CALL   000
0CB5:  MOVF   77,W
0CB6:  MOVWF  3E
0CB7:  MOVF   78,W
0CB8:  MOVWF  3F
0CB9:  MOVF   79,W
0CBA:  MOVWF  40
0CBB:  MOVF   7A,W
0CBC:  MOVWF  41
0CBD:  MOVLW  65
0CBE:  BSF    03.6
0CBF:  MOVWF  0D
0CC0:  MOVLW  00
0CC1:  MOVWF  0F
0CC2:  BCF    03.0
0CC3:  MOVLW  0B
0CC4:  BCF    03.6
0CC5:  MOVWF  43
0CC6:  CALL   1E1
0CC7:  MOVLW  01
0CC8:  MOVWF  04
0CC9:  MOVF   41,W
0CCA:  MOVWF  46
0CCB:  MOVF   40,W
0CCC:  MOVWF  45
0CCD:  MOVF   3F,W
0CCE:  MOVWF  44
0CCF:  MOVF   3E,W
0CD0:  MOVWF  43
0CD1:  MOVLW  01
0CD2:  MOVWF  47
0CD3:  CALL   075
0CD4:  MOVLW  6B
0CD5:  MOVWF  50
0CD6:  BCF    0A.3
0CD7:  CALL   20A
0CD8:  BSF    0A.3
0CD9:  MOVLW  57
0CDA:  MOVWF  50
0CDB:  BCF    0A.3
0CDC:  CALL   20A
0CDD:  BSF    0A.3
....................    break; 
0CDE:  GOTO   522
....................  
....................    case 1: 
....................    lcd_gotoxy(1,2);  
0CDF:  MOVLW  01
0CE0:  MOVWF  51
0CE1:  MOVLW  02
0CE2:  MOVWF  52
0CE3:  BCF    0A.3
0CE4:  CALL   1F8
0CE5:  BSF    0A.3
....................    printf(lcd_putc,"Ar: Bba Ab: Valv");  
0CE6:  MOVLW  6F
0CE7:  BSF    03.6
0CE8:  MOVWF  0D
0CE9:  MOVLW  00
0CEA:  MOVWF  0F
0CEB:  BCF    0A.3
0CEC:  BCF    03.6
0CED:  CALL   22E
0CEE:  BSF    0A.3
....................    break; 
0CEF:  GOTO   522
....................  
....................    case 6: 
....................    lcd_gotoxy(1,2);  
0CF0:  MOVLW  01
0CF1:  MOVWF  51
0CF2:  MOVLW  02
0CF3:  MOVWF  52
0CF4:  BCF    0A.3
0CF5:  CALL   1F8
0CF6:  BSF    0A.3
....................    printf(lcd_putc,"Ajuste de Hora  ");  
0CF7:  MOVLW  78
0CF8:  BSF    03.6
0CF9:  MOVWF  0D
0CFA:  MOVLW  00
0CFB:  MOVWF  0F
0CFC:  BCF    0A.3
0CFD:  BCF    03.6
0CFE:  CALL   22E
0CFF:  BSF    0A.3
....................    break; 
0D00:  GOTO   522
....................  
....................    case 7: 
....................    lcd_gotoxy(1,2);  
0D01:  MOVLW  01
0D02:  MOVWF  51
0D03:  MOVLW  02
0D04:  MOVWF  52
0D05:  BCF    0A.3
0D06:  CALL   1F8
0D07:  BSF    0A.3
....................    printf(lcd_putc,"Ajuste de Hora  ");  
0D08:  MOVLW  81
0D09:  BSF    03.6
0D0A:  MOVWF  0D
0D0B:  MOVLW  00
0D0C:  MOVWF  0F
0D0D:  BCF    0A.3
0D0E:  BCF    03.6
0D0F:  CALL   22E
0D10:  BSF    0A.3
....................    break; 
0D11:  GOTO   522
....................  
....................    case 8: 
....................    lcd_gotoxy(1,2);  
0D12:  MOVLW  01
0D13:  MOVWF  51
0D14:  MOVLW  02
0D15:  MOVWF  52
0D16:  BCF    0A.3
0D17:  CALL   1F8
0D18:  BSF    0A.3
....................    printf(lcd_putc,"Ajuste de Minuto");  
0D19:  MOVLW  8A
0D1A:  BSF    03.6
0D1B:  MOVWF  0D
0D1C:  MOVLW  00
0D1D:  MOVWF  0F
0D1E:  BCF    0A.3
0D1F:  BCF    03.6
0D20:  CALL   22E
0D21:  BSF    0A.3
....................    break; 
.................... } //SW 
.................... } //FN 
0D22:  RETURN
....................  
.................... void Calefa(){ 
.................... int diferencia; 
.................... int PromTemp; 
.................... PromTemp = ((intTempOut + intTempIn) / 2); 
*
129C:  MOVF   2E,W
129D:  ADDWF  2F,W
129E:  MOVWF  77
129F:  BCF    03.0
12A0:  RRF    77,W
12A1:  MOVWF  3F
.................... if (Menu == 3){ // Funcionando 
12A2:  MOVF   25,W
12A3:  SUBLW  03
12A4:  BTFSS  03.2
12A5:  GOTO   374
.................... restart_wdt(); // Reiniciamos el perro 
12A6:  CLRWDT
.................... if (Termostato == 7) Apagado(); 
12A7:  MOVF   30,W
12A8:  SUBLW  07
12A9:  BTFSS  03.2
12AA:  GOTO   2C5
.................... else{ 
*
12C4:  GOTO   373
.................... output_high(BBA); 
12C5:  BSF    03.5
12C6:  BCF    08.1
12C7:  BCF    03.5
12C8:  BSF    08.1
.................... if (PromTemp >= (Termostato * 5)) SaleCalor(0); 
12C9:  MOVF   30,W
12CA:  MOVWF  41
12CB:  MOVLW  05
12CC:  MOVWF  42
12CD:  BCF    0A.4
12CE:  BSF    0A.3
12CF:  CALL   239
12D0:  BSF    0A.4
12D1:  BCF    0A.3
12D2:  MOVF   78,W
12D3:  SUBWF  3F,W
12D4:  BTFSS  03.0
12D5:  GOTO   2DB
12D6:  CLRF   40
12D7:  BCF    0A.4
12D8:  CALL   279
12D9:  BSF    0A.4
.................... else { //Termostato en aumento 
12DA:  GOTO   373
.................... diferencia = ((Termostato * 5) - PromTemp); 
12DB:  MOVF   30,W
12DC:  MOVWF  41
12DD:  MOVLW  05
12DE:  MOVWF  42
12DF:  BCF    0A.4
12E0:  BSF    0A.3
12E1:  CALL   239
12E2:  BSF    0A.4
12E3:  BCF    0A.3
12E4:  MOVF   3F,W
12E5:  SUBWF  78,W
12E6:  MOVWF  3E
.................... if (diferencia == 1) SaleCalor(1); 
12E7:  DECFSZ 3E,W
12E8:  GOTO   2EE
12E9:  MOVLW  01
12EA:  MOVWF  40
12EB:  BCF    0A.4
12EC:  CALL   279
12ED:  BSF    0A.4
.................... if (diferencia == 2) if (MaxPower >= 2) SaleCalor(2); else SaleCalor(MaxPower); 
12EE:  MOVF   3E,W
12EF:  SUBLW  02
12F0:  BTFSS  03.2
12F1:  GOTO   301
12F2:  MOVF   33,W
12F3:  SUBLW  01
12F4:  BTFSC  03.0
12F5:  GOTO   2FC
12F6:  MOVLW  02
12F7:  MOVWF  40
12F8:  BCF    0A.4
12F9:  CALL   279
12FA:  BSF    0A.4
12FB:  GOTO   301
12FC:  MOVF   33,W
12FD:  MOVWF  40
12FE:  BCF    0A.4
12FF:  CALL   279
1300:  BSF    0A.4
.................... if (diferencia == 3) if (MaxPower >= 3) SaleCalor(3); else SaleCalor(MaxPower); 
1301:  MOVF   3E,W
1302:  SUBLW  03
1303:  BTFSS  03.2
1304:  GOTO   314
1305:  MOVF   33,W
1306:  SUBLW  02
1307:  BTFSC  03.0
1308:  GOTO   30F
1309:  MOVLW  03
130A:  MOVWF  40
130B:  BCF    0A.4
130C:  CALL   279
130D:  BSF    0A.4
130E:  GOTO   314
130F:  MOVF   33,W
1310:  MOVWF  40
1311:  BCF    0A.4
1312:  CALL   279
1313:  BSF    0A.4
.................... if (diferencia == 4) if (MaxPower >= 4) SaleCalor(4); else SaleCalor(MaxPower); 
1314:  MOVF   3E,W
1315:  SUBLW  04
1316:  BTFSS  03.2
1317:  GOTO   327
1318:  MOVF   33,W
1319:  SUBLW  03
131A:  BTFSC  03.0
131B:  GOTO   322
131C:  MOVLW  04
131D:  MOVWF  40
131E:  BCF    0A.4
131F:  CALL   279
1320:  BSF    0A.4
1321:  GOTO   327
1322:  MOVF   33,W
1323:  MOVWF  40
1324:  BCF    0A.4
1325:  CALL   279
1326:  BSF    0A.4
.................... if (diferencia == 5) if (MaxPower >= 5) SaleCalor(5); else SaleCalor(MaxPower); 
1327:  MOVF   3E,W
1328:  SUBLW  05
1329:  BTFSS  03.2
132A:  GOTO   33A
132B:  MOVF   33,W
132C:  SUBLW  04
132D:  BTFSC  03.0
132E:  GOTO   335
132F:  MOVLW  05
1330:  MOVWF  40
1331:  BCF    0A.4
1332:  CALL   279
1333:  BSF    0A.4
1334:  GOTO   33A
1335:  MOVF   33,W
1336:  MOVWF  40
1337:  BCF    0A.4
1338:  CALL   279
1339:  BSF    0A.4
.................... if (diferencia == 6) if (MaxPower >= 6) SaleCalor(6); else SaleCalor(MaxPower); 
133A:  MOVF   3E,W
133B:  SUBLW  06
133C:  BTFSS  03.2
133D:  GOTO   34D
133E:  MOVF   33,W
133F:  SUBLW  05
1340:  BTFSC  03.0
1341:  GOTO   348
1342:  MOVLW  06
1343:  MOVWF  40
1344:  BCF    0A.4
1345:  CALL   279
1346:  BSF    0A.4
1347:  GOTO   34D
1348:  MOVF   33,W
1349:  MOVWF  40
134A:  BCF    0A.4
134B:  CALL   279
134C:  BSF    0A.4
.................... if (diferencia == 7) if (MaxPower >= 7) SaleCalor(7); else SaleCalor(MaxPower); 
134D:  MOVF   3E,W
134E:  SUBLW  07
134F:  BTFSS  03.2
1350:  GOTO   360
1351:  MOVF   33,W
1352:  SUBLW  06
1353:  BTFSC  03.0
1354:  GOTO   35B
1355:  MOVLW  07
1356:  MOVWF  40
1357:  BCF    0A.4
1358:  CALL   279
1359:  BSF    0A.4
135A:  GOTO   360
135B:  MOVF   33,W
135C:  MOVWF  40
135D:  BCF    0A.4
135E:  CALL   279
135F:  BSF    0A.4
.................... if (diferencia >= 8) if (MaxPower >= 8) SaleCalor(8); else SaleCalor(MaxPower); 
1360:  MOVF   3E,W
1361:  SUBLW  07
1362:  BTFSC  03.0
1363:  GOTO   373
1364:  MOVF   33,W
1365:  SUBLW  07
1366:  BTFSC  03.0
1367:  GOTO   36E
1368:  MOVLW  08
1369:  MOVWF  40
136A:  BCF    0A.4
136B:  CALL   279
136C:  BSF    0A.4
136D:  GOTO   373
136E:  MOVF   33,W
136F:  MOVWF  40
1370:  BCF    0A.4
1371:  CALL   279
1372:  BSF    0A.4
.................... /* 
.................... if (diferencia < 2 ) SaleCalor(1); 
.................... if ((diferencia >= 2 ) && (diferencia < 4)) if (MaxPower >= 2) SaleCalor(2); else SaleCalor(MaxPower); 
.................... if ((diferencia >= 4) && (diferencia < 5)) if (MaxPower >= 3) SaleCalor(3); else SaleCalor(MaxPower); 
.................... if ((diferencia >= 5) && (diferencia < 6)) if (MaxPower >= 4) SaleCalor(4); else SaleCalor(MaxPower); 
.................... if ((diferencia >= 6) && (diferencia < 7)) if (MaxPower >= 5) SaleCalor(5); else SaleCalor(MaxPower); 
.................... if ((diferencia >= 7) && (diferencia < 8)) if (MaxPower >= 6) SaleCalor(6); else SaleCalor(MaxPower); 
.................... if ((diferencia >= 8) && (diferencia < 9)) if (MaxPower >= 7) SaleCalor(7); else SaleCalor(MaxPower); 
.................... if ( diferencia >= 9) if (MaxPower >= 8) SaleCalor(8); else SaleCalor(MaxPower); 
.................... */ 
.................... } // Termostato en aumento 
.................... } 
.................... } else ShutDown(); // Menu es 2 o sea operacion normal 
1373:  GOTO   379
1374:  BCF    0A.4
1375:  BSF    0A.3
1376:  CALL   785
1377:  BSF    0A.4
1378:  BCF    0A.3
.................... } // Fn 
....................  
.................... void Automa(){ 
.................... if (((HsOn / 2) == hrs) && (((HsOn % 2) * 30) == min)){ 
*
0ED5:  BCF    03.0
0ED6:  RRF    31,W
0ED7:  SUBWF  23,W
0ED8:  BTFSS  03.2
0ED9:  GOTO   6E7
0EDA:  MOVF   31,W
0EDB:  ANDLW  01
0EDC:  MOVWF  3F
0EDD:  MOVWF  41
0EDE:  MOVLW  1E
0EDF:  MOVWF  42
0EE0:  CALL   239
0EE1:  MOVF   22,W
0EE2:  SUBWF  78,W
0EE3:  BTFSS  03.2
0EE4:  GOTO   6E7
.................... Menu = 3; 
0EE5:  MOVLW  03
0EE6:  MOVWF  25
.................... // EX DISEÑO if (Termostato == 7) Termostato = read_eeprom(TERMOSTAT); 
.................... // EX DISEÑO if (Termostato == 7) Termostato = 13; //por si estaba apagada 
.................... }//On conincide 
....................  
.................... if (((HsOff / 2) == hrs) && (((HsOff % 2) * 30) == min)){ 
0EE7:  BCF    03.0
0EE8:  RRF    32,W
0EE9:  SUBWF  23,W
0EEA:  BTFSS  03.2
0EEB:  GOTO   6F9
0EEC:  MOVF   32,W
0EED:  ANDLW  01
0EEE:  MOVWF  3F
0EEF:  MOVWF  41
0EF0:  MOVLW  1E
0EF1:  MOVWF  42
0EF2:  CALL   239
0EF3:  MOVF   22,W
0EF4:  SUBWF  78,W
0EF5:  BTFSS  03.2
0EF6:  GOTO   6F9
.................... Menu = 2; 
0EF7:  MOVLW  02
0EF8:  MOVWF  25
.................... // EX DISEÑO Termostato = 7; 
.................... }//Off conincide 
.................... }//fn 
0EF9:  BSF    0A.3
0EFA:  BCF    0A.4
0EFB:  GOTO   7BC (RETURN)
....................  
.................... void Criticos(){ 
.................... if ((intTempOut > 86) && (intTempOut <= 100)) ++CritExS1;  
*
124E:  MOVF   2F,W
124F:  SUBLW  56
1250:  BTFSC  03.0
1251:  GOTO   256
1252:  MOVF   2F,W
1253:  SUBLW  64
1254:  BTFSC  03.0
1255:  INCF   39,F
.................... if ((intTempIn  > 86) && (intTempIn  <= 100)) ++CritExS2;  
1256:  MOVF   2E,W
1257:  SUBLW  56
1258:  BTFSC  03.0
1259:  GOTO   25E
125A:  MOVF   2E,W
125B:  SUBLW  64
125C:  BTFSC  03.0
125D:  INCF   3A,F
.................... if ((CritExS1 > 2) || (CritExS2 > 2)) { ShutDown(); EstadoCritico = 1; } 
125E:  MOVF   39,W
125F:  SUBLW  02
1260:  BTFSS  03.0
1261:  GOTO   266
1262:  MOVF   3A,W
1263:  SUBLW  02
1264:  BTFSC  03.0
1265:  GOTO   26D
1266:  BCF    0A.4
1267:  BSF    0A.3
1268:  CALL   785
1269:  BSF    0A.4
126A:  BCF    0A.3
126B:  MOVLW  01
126C:  MOVWF  37
....................  
.................... /*if (input(CRITICO) == 1) { //Evitamos falsas lecturas 
....................    delay_ms(500); 
....................    if (input(CRITICO) == 1) { 
....................       delay_ms(500); 
....................       if (input(CRITICO) == 1) { 
....................          ShutDown(); 
....................          EstadoCritico = 2; 
....................       } 
....................    } 
.................... } // Nivel critico */ 
....................  
.................... if (NCritico == True){ 
126D:  BTFSS  24.2
126E:  GOTO   276
....................    ShutDown(); 
126F:  BCF    0A.4
1270:  BSF    0A.3
1271:  CALL   785
1272:  BSF    0A.4
1273:  BCF    0A.3
....................    EstadoCritico = 2; 
1274:  MOVLW  02
1275:  MOVWF  37
.................... } 
....................  
.................... if ((intTempOut > 100) || (intTempOut < 4)) ++CritErS1; 
1276:  MOVF   2F,W
1277:  SUBLW  64
1278:  BTFSS  03.0
1279:  GOTO   27D
127A:  MOVF   2F,W
127B:  SUBLW  03
127C:  BTFSC  03.0
127D:  INCF   3B,F
.................... if ((intTempIn  > 100) || (intTempIn  < 4)) ++CritErS2;  
127E:  MOVF   2E,W
127F:  SUBLW  64
1280:  BTFSS  03.0
1281:  GOTO   285
1282:  MOVF   2E,W
1283:  SUBLW  03
1284:  BTFSC  03.0
1285:  INCF   3C,F
.................... if ((CritErS1 > 2) || (CritErS2 > 2)) { ShutDown(); EstadoCritico = 3; } 
1286:  MOVF   3B,W
1287:  SUBLW  02
1288:  BTFSS  03.0
1289:  GOTO   28E
128A:  MOVF   3C,W
128B:  SUBLW  02
128C:  BTFSC  03.0
128D:  GOTO   295
128E:  BCF    0A.4
128F:  BSF    0A.3
1290:  CALL   785
1291:  BSF    0A.4
1292:  BCF    0A.3
1293:  MOVLW  03
1294:  MOVWF  37
....................  
....................  
.................... if (EstadoCritico == 0){ 
1295:  MOVF   37,F
1296:  BTFSS  03.2
1297:  GOTO   383
.................... if (Menu == 3){ 
1298:  MOVF   25,W
1299:  SUBLW  03
129A:  BTFSS  03.2
129B:  GOTO   37E
.................... Calefa(); 
.................... output_high(BBA); 
*
1379:  BSF    03.5
137A:  BCF    08.1
137B:  BCF    03.5
137C:  BSF    08.1
.................... //if (input(LLENADO) == 1) Llenar = True; 
.................... //else Llenar = False; 
.................... } else ShutDown(); // Menu 1 
137D:  GOTO   383
137E:  BCF    0A.4
137F:  BSF    0A.3
1380:  CALL   785
1381:  BSF    0A.4
1382:  BCF    0A.3
.................... } //Estado Critico 0 
.................... } // fn 
1383:  BSF    0A.3
1384:  BCF    0A.4
1385:  GOTO   7DB (RETURN)
....................  
.................... void ShutDown(){ 
.................... if ((intTempOut < 40) && (intTempIn < 40)) output_low(BBA); 
*
0F85:  MOVF   2F,W
0F86:  SUBLW  27
0F87:  BTFSS  03.0
0F88:  GOTO   792
0F89:  MOVF   2E,W
0F8A:  SUBLW  27
0F8B:  BTFSS  03.0
0F8C:  GOTO   792
0F8D:  BSF    03.5
0F8E:  BCF    08.1
0F8F:  BCF    03.5
0F90:  BCF    08.1
.................... else output_high(BBA); 
0F91:  GOTO   796
0F92:  BSF    03.5
0F93:  BCF    08.1
0F94:  BCF    03.5
0F95:  BSF    08.1
.................... output_low(VALVE); 
0F96:  BSF    03.5
0F97:  BCF    08.2
0F98:  BCF    03.5
0F99:  BCF    08.2
.................... SaleCalor(0); 
0F9A:  CLRF   40
0F9B:  BCF    0A.3
0F9C:  CALL   279
0F9D:  BSF    0A.3
.................... } 
0F9E:  RETURN
....................  
.................... void Apagado(){ 
.................... if ((intTempOut < 40) && (intTempIn < 40)) output_low(BBA); 
*
12AB:  MOVF   2F,W
12AC:  SUBLW  27
12AD:  BTFSS  03.0
12AE:  GOTO   2B8
12AF:  MOVF   2E,W
12B0:  SUBLW  27
12B1:  BTFSS  03.0
12B2:  GOTO   2B8
12B3:  BSF    03.5
12B4:  BCF    08.1
12B5:  BCF    03.5
12B6:  BCF    08.1
.................... else output_high(BBA); 
12B7:  GOTO   2BC
12B8:  BSF    03.5
12B9:  BCF    08.1
12BA:  BCF    03.5
12BB:  BSF    08.1
.................... output_low(VALVE); 
12BC:  BSF    03.5
12BD:  BCF    08.2
12BE:  BCF    03.5
12BF:  BCF    08.2
.................... SaleCalor(0); 
12C0:  CLRF   40
12C1:  BCF    0A.4
12C2:  CALL   279
12C3:  BSF    0A.4
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 3F76   HS WDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
